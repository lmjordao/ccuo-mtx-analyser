<?xml version="1.0" encoding="UTF-8"?>
<!-- Created 2020-04-28 00:23:36 by acristin on BTIS1000096002 using MTPE-5.3.0.1 -->
<!-- File: C:/Users/acristin/Workspaces/Generic Workspace/PAD_P_WML/MTPE/components/PAD_P_WML/PAD_P_SignalBindingIn.mtx -->
<pou name="PAD_P_SignalBindingIn" version="1.0.13.0" type="ST" sub-type="Program" user-build="0">
 <iec-data><![CDATA[(*@PROPERTIES_EX@
TYPE: POU
LOCALE: 0
IEC_LANGUAGE: ST
PLC_TYPE: PowerPC
PROC_TYPE: independent
GROUP: PAD.PAD_P_WestMidland
*)
(*@KEY@:DESCRIPTION*)
---------------------------------------------------------------------------------------
COPYRIGHT       :   (c) 2017 Bombardier Inc. or its subsidiaries. All rights reserved.
---------------------------------------------------------------------------------------
name            :   PAD_P_SignalBindingIn
category        :   Program POU PAD generic 

revision log    :
1.0.20.28 : 2020-04-08 : Armando Cristino (RoQ)         : Defect 454464 : Changed name of PAD_CCrwPnlDrClLft/Rgt to PAD_CPnlDrClLft/Rgt in FromGW
1.0.20.27 : 2020-04-07 : Armando Cristino (RoQ/TDC)     : Defect 435847: TC_SubOpMode.SMaintenanceMode is now set when any of the consists in the train is in Maintenance Mode instead of being set only if this consist is in Maintenance Mode
1.0.20.26 : 2020-03-31 : Pedro Ribeiro (RoQ)            : FR     293251: Disabling PK44 signals from CCUS
1.0.20.25 : 2020-03-26 : Pedro Ribeiro (RoQ/TDC)        : FR 396605: Update MIOS to allow door close from guard panel
1.0.20.24 : 2020-03-15 : Pedro Ribeiro (RoQ)            : FR 396601: Added signal trainwide request to close doors
1.0.20.23 : 2020-03-13 : Pedro Ribeiro (RoQ)            : Defect 398336: Add parameter to PK44 side selection and CSDE RFID Clear PAD_PPk44SideSelProj
1.0.20.22 : 2020-03-03 : Armando Cristino (RoQ/TDC)     : FR 396622: Added the missing SalCrwPnl signals in FromMIO and corrected the description for WML
1.0.20.21 : 2020-02-19 : Pedro Ribeiro (RoQ/TDC)        : Defect 336593: add signal PAD_REndAsdoSafeTest
1.0.20.20 : 2020-02-18 : Armando Cristino(RoQ/TDC)		: Defect 285983: Receiving NextStnID to send to CCUS and receiving NxtStnRelPttrn to send to PIS
1.0.20.19 : 2020-02-18 : Armando Cristino(RoQ/TDC)		: Defect 421919: Added CI_CCUS_EMissDoor and CI_CCUS_EDuplDoor signals to PAD_P_SignalBindingIn: FromCCUS
1.0.20.18 : 2019-11-29 : Armando Cristino (RoQ/TDC)     : FR 311035: Added input of TCM_GrdOnlyMd in FromOtherFA to be used in Family POU and changed the name of PAD_SSalCrwPnlAct to PAD_SalCrwPnlAct in FromMIO 
1.0.20.17 : 2019-11-12 : Armando Cristino (RoQ/TDC)     : Defect 384336: Removed prior implementation of release pattern to PIS. Release pattern received from CCUS is now sent directly to PIS.
1.0.20.16 : 2019-11-11 : Ines Madureira  (RoQ)      	: Defect 385318: Corrected door mapping to align with EAA naming scheme (on worksheets FromHMI and FromMIO)
1.0.20.15 : 2019-11-08 : Armando Cristino(RoQ/TDC)      : Defect 393159: Changed signal naming in FromMIO, CI_MIO_SS to CI_MIO_S
1.0.20.14 : 2019-10-24 : Armando Cristino(RoQ/TDC)      : FR 384336: Added new signal coming from CCUS CI_CCUS_XOwnCst
1.0.20.13 : 2019-10-23 : Armando Cristino (RoQ/TDC)     : Defect 385318: Fixed car/door signal mapping in FromHMI to be compliant with EAA Logical car/door numbering
1.0.20.12 : 2019-10-14 : Pedro Ribeiro (RoQ/TDC)  		: Defects 340536/ 374161/ 380004: Added ASDO test results inputs from CCUS to From CCUS
1.0.20.11 : 2019-10-14 : Armando Cristino (RoQ/TDC)     : Defect 384336: Receiving Sdo release Pattern from each consist in worksheet FromGW
1.0.20.10 : 2019-09-19 : Armando Cristino (RoQ/TDC)     : Defect 364624: Corrected mapping from CCUS to EAA in FromCCUS
1.0.20.9  : 2019-08-30 : Armando Cristino (RoQ/TDC)     : Defect 321533: Added CI_CCUS_SAsdoOvrdAvl as an input from CCUS
1.0.20.8  : 2019-06-28 : Armando Cristino (RoQ/TDC)     : FR 331835: Changed signal names from CI_MIO_SDrRelPb to CI_MIO_SSDrRelPb
1.0.20.7  : 2019-06-27 : Armando Cristino (RoQ/TDC)     : FR 249096: Added signals in 'FromGW' sheet- to receive drag detection status from all consists
1.0.20.7  : 2019-05-01 : Armando Cristino (RoQ/TDC)     : Task 325866 : Added needed conversions from USINT to BYTE to ToOtherFA 
1.0.20.6  : 2019-03-07 : Armando Cristino (RoQ/TDC)     : FR 288763 : Added CI_CCUS_SXCabStTrn to ToOtherFA so it can be used as validity in PAD_G_DrvIf 
1.0.20.5  : 2019-02-15 : Armando Cristino (RoQ/TDC)     : Defect 297132: Route cold movement detection, CSDE data from CCUS and condition data
1.0.20.4  : 2019-02-04 : Armando Cristino(RoQ/TDC)      : FR 288763: Deleted Crew Panel implementation in FromMIO
1.0.20.3  : 2019-01-28 : Armando Cristino(RoQ/TDC)      : FR 288763: task 292134 - Implemented CabSide Wall pushbuttons input to close doors
1.0.20.2  : 2019-01-29 : Aditya Karmarkar (RoQ/TDC)     : FR 288760: In 'FromMIO'- added logic to receive the guard panel and its pushbuttons status active for conductor mode; In 'FromGW'- receive conductor mode status from all consists
1.0.20.1  : 2019-01-18 : Rene Klein    (RoQ/TPX)        : FR 288770: added worksheet FromTDR and moved TDR input signals to this worksheet
1.0.20.0  : 2019-01-16 : Rene Klein    (RoQ/TPX)        : FR 288770: added 4 feedback signals from TDR -> PAD_SDiDrRelSideA,PAD_SDiDrRelSideB,PAD_SDiDrClSideA and PAD_SDiDrClSideB 
1.0.19.0  : 2019-01-08 : Aditya Karmarkar (RoQ/TDC)     : FR 278253: Added worksheet 'FromPIBS' to handle PIBS communication 
1.0.18.0  : 2019-01-08 : Rene Klein    (RoQ/TPX)        : FR 278253: FR 248985, added New signals from bus from other consist
1.0.17.0  : 2019-01-08 : Rene Klein    (RoQ/TPX)        : FR 278253: FR 248941: changed signalname PAD_SDrTrmMdActHMI to PAD_SDrTrmMdPrsdHMI
1.0.16.0  : 2019-01-08 : Rene Klein    (RoQ/TPX)        : FR 278253: Defect 165286: verify and correct the door inhibit request signals (from HMI_CI_SCar[1-5]DrInh[A-F] to VIS_SCar[1-5]DrInh[A-F])
1.0.15.0  : 2018-12-13 : Rene Klein    (RoQ/TPX)        : FR 278253: Defect 141331: mios for cab door status adapted to ctc
1.0.14.0  : 2018-12-12 : Rene Klein    (RoQ/TPX)        : FR 278253: Defect 214588: determination of number of cars in consist
1.0.13.1  : 2018-09-28:  Rene Klein    (RoQ/TPX)        : CR192068: added worksheet FromPAD_Internal
1.0.13.0  : 2018-01-09 : Erwan Humbert (RoQ/TPD)        : RTC 165645 - FCR 019672: ASDO & CSDE Updates following Customer Review.
1.0.12.5  : 2017-09-28 : Stefan Lemke (RoQ/TPAS)        : unconnected signals removed
1.0.12.4  : 2017-09-01 : Stefan Lemke (RoQ/TPAS)        : Crew switch activation
1.0.12.3  : 2017-08-30 : Stefan Lemke (RoQ/TPAS)        : CI_L#SCabSalDrCls1 and 2 updated according IP booking list
1.0.12.2  : 2017-08-16 : Stefan Lemke (RoQ/TPX)         : C_VHMISCtrl removed
1.0.12.1  : 2017-07-12 : Peter Schenk  (RoQ/TPX)        : Add Cab/Saloon doors to Gateway
1.0.12.0  : 2017-07-10 : Erwan Humbert (RoQ/TPX)        : Fix unconnected signals from integrator list.
1.0.11.0  : 2017-07-07 : Erwan Humbert (RoQ/TPX)        : Enable_PAD activation flag.
1.0.10.2  : 2017-07-05 : Tushar Chodvadiya (RoQ/TIG)    : Updated due to signal renamed (SSwDrsClsLck)
1.0.10.1  : 2017-03-31 : Iva Milojevic(RoQ/TPX)         : added signals & logic : PAD_SDrTrmMdAct, CI_HMI_STrnClrMd, CI_ML_SDrTrmMdAct, 
                                                        : PAD_SDrTrmMdCst , PAD_PTClearTrnCl:= PAD_PClrTrnClTm;
1.0.10.0  : 2017-03-30 : Erwan Humbert (RoQ/TPX)        : Implement project specific features.
1.0.9.1   : 2017-03-15 : Iva Milojevic(RoQ/TPX)         : replaced DCM_SSwLoSpd and its valid bit with CI_CCUS_SSwLoSpd. no valid bit
1.0.9.0   : 2017-03-23 : Erwan Humbert (RoQ/TPX)        : added CCUS TDR signals.
1.0.8.0   : 2017-03-22 : Erwan Humbert (RoQ/TPX)        : added side selection train wide.
1.0.7.5   : 2017-03-22 : Peter Schenk (RoQ/TPX)         : added MIO Cab-Saloon door closed cab 1+2
1.0.7.4   : 2017-03-15 : Iva Milojevic(RoQ/TPX)         : erased logic for train speed - at the moment we dont read train speed information, only standstill
1.0.7.3   : 2017-03-14 : Iva Milojevic(RoQ/TPX)         : bit pattern for SNodeExist added, added input for train speed, transfor in our format
                                                        : valid bits from release MIO connection fixed
1.0.7.0   : 2017-03-13 : Erwan Humbert (RoQ/TPX)        : validity bits for HMI signals. Apply LOTrain car numbering
1.0.6.2   : 2017-03-09 : Iva Milojevic(RoQ/TPX)         : added signals TCC_SCarNrTrnCfg and TPCC_SCabCpldElec, changed TCC_SCabAct_3 (from _2) 
1.0.6.1   : 2017-03-07 : Iva Milojevic(RoQ/TPX)         : linked signals for release and side requests
1.0.6.0   : 2017-03-07 : Peter Schenk (RoQ/TPX)         : naming conventions, added OPENED and RELEASED status
1.0.5.0   : 2017-03-02 : Iva Milojevic(RoQ/TPX)         : added signal for open command from HMI, and GW commands for open and release command
1.0.4.0   : 2017-03-01 : Erwan Humbert (RoQ/TPX)        : new code sheet for CCU-S inputs (ASDO, CSDE).
1.0.3.0   : 2017-02-28 : Erwan Humbert (RoQ/TPX)        : new code sheet for HMI commands, mapped to command from bus.
1.0.2.0   : 2017-02-24 : Iva Milojevic(RoQ/TPX)         : new naming convention applied for signals between function areas
1.0.1.0   : 2017-02-22 : Iva Milojevic (RoQ/TPX)        : applied naming convention for close command, changed MIO names for close, added Release MIO
1.0.0.6   : 2017-01-19 : Stefan Lemke (RoQ/TPX)         : packed bitmap together for cab active without wholes.
1.0.0.5   : 2016-01-12 : Iva Milojevic (RoQ/TPX)        : changed status signals from GW (single signals instead of structure)
                                                        : replaced tabs with spaces
1.0.0.4   : 2016-01-12 : Peter Schenk (RoQ/TPX)         : added DoorLoop HW Signals to Datatype
1.0.0.3   : 2016-11-16 : Iva Milojevic (RoQ/TPX)        : added signals from other FA as out here, MIOs for close
1.0.0.2   : 2016-11-15 : Iva Milojevic (RoQ/TPX)        : erased duplicate signal logic, renamed outputs to match to generic interface
1.0.0.1   : 2016-11-15 : Peter Schenk (RoQ/TPX)         : added door conditions consist 2-4
1.0.0.0   : 2016-11-11 : Peter Schenk (RoQ/TPX)         : first issue


description:
read project specific signals :
status from train bus 
MIO-In 
signals from other FA
signals from HMI over ETB
local CCUS-S
(*@KEY@:END_DESCRIPTION*)
PROGRAM PAD_P_SignalBindingIn

(*Group:NewGroup*)
(*Group:Input- PAD_Internal*)


VAR_INPUT
	CO_DCU1_ZOp :	USINT;(*Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)*)
	CO_DCU2_ZOp :	USINT;(*Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)*)
	CO_DCU3_ZOp :	USINT;(*Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)*)
	CO_DCU4_ZOp :	USINT;(*Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)*)
	CO_DCU5_ZOp :	USINT;(*Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)*)
	CO_DCU1_ZCl :	USINT;(*Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)*)
	CO_DCU2_ZCl :	USINT;(*Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)*)
	CO_DCU3_ZCl :	USINT;(*Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)*)
	CO_DCU4_ZCl :	USINT;(*Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)*)
	CO_DCU5_ZCl :	USINT;(*Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)*)
END_VAR


(*Group:Input- OtherFA*)


VAR_INPUT
	Enable_FA :	BOOL;(*Enable PAD FA*)
	TCC_SOrientV :	BOOL;(*indicates whether the orientation is valid*)
	TCC_SOrientSame :	BOOL;(*indicates whether the consist  orientation is same to train direction*)
	TCC_SOrientInverse :	BOOL;(*indicates whether the  consist  orientation is inverse to train direction*)
	TCC_T_SCabAct :	BOOL;(*Cab Active in Train*)
	TCC_SCabAct_1 :	BOOL;(*Cab is active in car 1*)
	TCC_SCabAct_3 :	BOOL;(*Cab is active in car 3*)
	TCC_XNumCst :	INT;(*Number of consists, 1=1*)
	C_SSysInitDone :	BOOL;(*System initalisation is done*)
	TCC_SCarNrTrnCfg :	USINT;(*Value: Total Number of cars in train configuration*)
	TCC_SMaster :	BOOL;(*driver desk 1 in consist is activ and acknowledged by driver*)
	PAD_PXNoOfObstAttmpt :	USINT;(*No. Obstacles Re-open or Re-close attempts; (Global signal which is the same for all doors); Default : 3*)
	PAD_PXReOpDist :	UINT;(*Re-opening Distance; Re-opening width on door obstacle detection; Default : 100*)
	PAD_PAutClTm :	USINT;(*Auto close time parameter*)
	PAD_PClrTrnClTm :	TIME;(*Clear train closing time parameter*)
	PAD_PZDisIntClPbCar1 :	USINT;(*Disable Interior Local Door Close P/B (bitmap: bit0=DcuA, bit1=DcuB, bit2=DcuC,...)*)
	PAD_PZDisIntClPbCar2 :	USINT;(*Disable Interior Local Door Close P/B (bitmap: bit0=DcuA, bit1=DcuB, bit2=DcuC,...)*)
	PAD_PZDisIntClPbCar3 :	USINT;(*Disable Interior Local Door Close P/B (bitmap: bit0=DcuA, bit1=DcuB, bit2=DcuC,...)*)
	PAD_PZDisIntClPbCar4 :	USINT;(*Disable Interior Local Door Close P/B (bitmap: bit0=DcuA, bit1=DcuB, bit2=DcuC,...)*)
	PAD_PZDisIntClPbCar5 :	USINT;(*Disable Interior Local Door Close P/B (bitmap: bit0=DcuA, bit1=DcuB, bit2=DcuC,...)*)
	FM_STrnFireDtc :	BOOL;(*Fire detected in the train*)
	TCC_XCarNrTrnCfg :	INT;(*Number of Cars in each consists in train*)
	TCC_XCstNr :	INT;(*Number of local consist 1=1*)
	VIS_SCar1DrInhA :	BOOL;(*Door A Car1 Inhibit Door Request*)
	VIS_SCar1DrInhC :	BOOL;(*Door C Car1 Inhibit Door Request*)
	VIS_SCar1DrInhD :	BOOL;(*Door D Car1 Inhibit Door Request*)
	VIS_SCar1DrInhF :	BOOL;(*Door F Car1 Inhibit Door Request*)
	VIS_SCar2DrInhA :	BOOL;(*Door A Car2 Inhibit Door Request*)
	VIS_SCar2DrInhC :	BOOL;(*Door C Car2 Inhibit Door Request*)
	VIS_SCar2DrInhD :	BOOL;(*Door D Car2 Inhibit Door Request*)
	VIS_SCar2DrInhF :	BOOL;(*Door F Car2 Inhibit Door Request*)
	VIS_SCar3DrInhA :	BOOL;(*Door A Car3 Inhibit Door Request*)
	VIS_SCar3DrInhC :	BOOL;(*Door C Car3 Inhibit Door Request*)
	VIS_SCar3DrInhD :	BOOL;(*Door D Car3 Inhibit Door Request*)
	VIS_SCar3DrInhF :	BOOL;(*Door F Car3 Inhibit Door Request*)
	VIS_SCar4DrInhA :	BOOL;(*Door A Car4 Inhibit Door Request*)
	VIS_SCar4DrInhC :	BOOL;(*Door C Car4 Inhibit Door Request*)
	VIS_SCar4DrInhD :	BOOL;(*Door D Car4 Inhibit Door Request*)
	VIS_SCar4DrInhF :	BOOL;(*Door F Car4 Inhibit Door Request*)
	VIS_SCar5DrInhA :	BOOL;(*Door A Car5 Inhibit Door Request*)
	VIS_SCar5DrInhC :	BOOL;(*Door C Car5 Inhibit Door Request*)
	VIS_SCar5DrInhD :	BOOL;(*Door D Car5 Inhibit Door Request*)
	VIS_SCar5DrInhF :	BOOL;(*Door F Car5 Inhibit Door Request*)
	DIACD_CSideLft :	BOOL;(*Command to close side right*)
	DIACD_CSideRgt :	BOOL;(*Command to close side left*)
	TCM_GrdOnlyMd :	BOOL;(*Guard Only Mode is Active*)
END_VAR


(*Group:Input - From Train Bus*)


VAR_INPUT
	CI_ML_SDrTrmMdAct :	BOOL;(*command to activate terminal station mode*)
	CI_ML_COpDrsLft :	BOOL;(*command to open doors on the left side of the train*)
	CI_ML_COpDrsRgt :	BOOL;(*command to open doors on the right side of the train*)
	CI_ML_CRlsDrsLft :	BOOL;(*command to release doors on the left side of the train*)
	CI_ML_CRlsDrsRgt :	BOOL;(*command to release doors on the right side of the train*)
	CI_ML_CClDrsLft :	BOOL;(*command to close doors on the left side of the train*)
	CI_ML_CClDrsRgt :	BOOL;(*command to close doors on the right side of the train*)
	CI_ML_SCsdeEnLft :	BOOL;(*Train status CSDE left side enabled*)
	CI_ML_SCsdeEnRgt :	BOOL;(*Train status CSDE right side enabled*)
	CI_ML_SDrIntrLck1 :	BOOL;(*Interlock Singnal 1*)
	CI_ML_SDrIntrLck2 :	BOOL;(*Interlock Singnal 2*)
	CI_ML_GNextStnId :	UDINT;(*GW: Next station ID*)
	CI_ML_RClDrsRgt :	BOOL;(*Request to close doors on the right side of the train*)
	CI_ML_RClDrsLft :	BOOL;(*Request to close doors on the right side of the train*)
	C_VCCUOM :	BOOL;(*validity bit for train wide commands inputs*)
	CI_L1_SDrsClsLck :	BOOL;(*status doors closed and locked in consist 1*)
	CI_L1_SDrsClsdLft :	BOOL;(*status doors closed and locked on left side in consist 1*)
	CI_L1_SDrsClsdRgt :	BOOL;(*status doors closed and locked on right side in consist 1*)
	CI_L1_SCabDrsClsdLft1 :	BOOL;(*status cab doors closed and locked on left side in consist 1*)
	CI_L1_SCabDrsClsdRgt1 :	BOOL;(*status cab doors closed and locked on right side in consist 1*)
	CI_L1_SCabDrsClsdLft2 :	BOOL;(*status cab doors closed and locked on left side in consist 1*)
	CI_L1_SCabDrsClsdRgt2 :	BOOL;(*status cab doors closed and locked on right side in consist 1*)
	CI_L1_SCabSalDrCls1 :	BOOL;(*status cab-saloon door closed cab 1*)
	CI_L1_SCabSalDrCls2 :	BOOL;(*status cab-saloon door closed cab 2*)
	CI_L1_SDrsObstclDetCls :	BOOL;(*status obastacles are detected  in consist 1*)
	CI_L1_SClsDrsLft :	BOOL;(*feedback command close door on left side in consist 1*)
	CI_L1_SClsDrsRgt :	BOOL;(*feedback command close door on right side in consist 1*)
	CI_L1_SDiStp :	BOOL;(*feedback command disable steps in consist 1*)
	CI_L1_SDrsRlsdLft :	BOOL;(*status doors released on left side in consist 1*)
	CI_L1_SDrsRlsdRgt :	BOOL;(*status doors released on right side in consist 1*)
	CI_L1_SDrsOpndLft :	BOOL;(*status doors opened on left side in consist 1*)
	CI_L1_SDrsOpndRgt :	BOOL;(*status doors opened on right side in consist 1*)
	CI_L1_SEmAcsAct :	BOOL;(*status emergency access is active in consist 1*)
	CI_L1_SEmEgrAct :	BOOL;(*status emergency egress is active in consist 1*)
	CI_L1_SServKeyAct :	BOOL;(*status service key is active is active in consist 1*)
	CI_L2_SDrsClsLck :	BOOL;(*status doors closed and locked in consist 2*)
	CI_L2_SDrsClsdLft :	BOOL;(*status doors closed and locked on left side in consist 2*)
	CI_L2_SDrsClsdRgt :	BOOL;(*status doors closed and locked on right side in consist 2*)
	CI_L2_SCabDrsClsdLft1 :	BOOL;(*status cab doors closed and locked on left side in consist 2*)
	CI_L2_SCabDrsClsdRgt1 :	BOOL;(*status cab doors closed and locked on right side in consist 2*)
	CI_L2_SCabDrsClsdLft2 :	BOOL;(*status cab doors closed and locked on left side in consist 2*)
	CI_L2_SCabDrsClsdRgt2 :	BOOL;(*status cab doors closed and locked on right side in consist 2*)
	CI_L2_SCabSalDrCls1 :	BOOL;(*status cab-saloon door closed cab 1*)
	CI_L2_SCabSalDrCls2 :	BOOL;(*status cab-saloon door closed cab 2*)
	CI_L2_SDrsObstclDetCls :	BOOL;(*statusobastacles are detected  in consist 2*)
	CI_L2_SClsDrsLft :	BOOL;(*feedback command close door on left side in consist 2*)
	CI_L2_SClsDrsRgt :	BOOL;(*feedback command close door on right side in consist 2*)
	CI_L2_SDiStp :	BOOL;(*feedback command disable steps in consist 2*)
	CI_L2_SDrsRlsdLft :	BOOL;(*status doors released on left side in consist 2*)
	CI_L2_SDrsRlsdRgt :	BOOL;(*status doors released on right side in consist 2*)
	CI_L2_SDrsOpndLft :	BOOL;(*status doors opened on left side in consist 2*)
	CI_L2_SDrsOpndRgt :	BOOL;(*status doors opened on right side in consist 2*)
	CI_L2_SEmAcsAct :	BOOL;(*status emergency access is active in consist 2*)
	CI_L2_SEmEgrAct :	BOOL;(*status emergency egress is active in consist 2*)
	CI_L2_SServKeyAct :	BOOL;(*status service key is active is active in consist 2*)
	CI_L3_SDrsClsLck :	BOOL;(*status doors closed and locked in consist 3*)
	CI_L3_SDrsClsdLft :	BOOL;(*status doors closed and locked on left side in consist 3*)
	CI_L3_SDrsClsdRgt :	BOOL;(*status doors closed and locked on right side in consist 3*)
	CI_L3_SCabDrsClsdLft1 :	BOOL;(*status cab doors closed and locked on left side in consist 3*)
	CI_L3_SCabDrsClsdRgt1 :	BOOL;(*status cab doors closed and locked on right side in consist 3*)
	CI_L3_SCabDrsClsdLft2 :	BOOL;(*status cab doors closed and locked on left side in consist 3*)
	CI_L3_SCabDrsClsdRgt2 :	BOOL;(*status cab doors closed and locked on right side in consist 3*)
	CI_L3_SCabSalDrCls1 :	BOOL;(*status cab-saloon door closed cab 1*)
	CI_L3_SCabSalDrCls2 :	BOOL;(*status cab-saloon door closed cab 2*)
	CI_L3_SDrsObstclDetCls :	BOOL;(*statusobastacles are detected  in consist 3*)
	CI_L3_SClsDrsLft :	BOOL;(*feedback command close door on left side in consist 3*)
	CI_L3_SClsDrsRgt :	BOOL;(*feedback command close door on right side in consist 3*)
	CI_L3_SDiStp :	BOOL;(*feedback command disable steps in consist 3*)
	CI_L3_SDrsRlsdLft :	BOOL;(*status doors released on left side in consist 3*)
	CI_L3_SDrsRlsdRgt :	BOOL;(*status doors released on right side in consist 3*)
	CI_L3_SDrsOpndLft :	BOOL;(*status doors opened on left side in consist 3*)
	CI_L3_SDrsOpndRgt :	BOOL;(*status doors opened on right side in consist 3*)
	CI_L3_SEmAcsAct :	BOOL;(*status emergency access is active in consist 3*)
	CI_L3_SEmEgrAct :	BOOL;(*status emergency egress is active in consist 3*)
	CI_L3_SServKeyAct :	BOOL;(*status service key is active is active in consist 3*)
	CI_L4_SDrsClsLck :	BOOL;(*status doors closed and locked in consist 4*)
	CI_L4_SDrsClsdLft :	BOOL;(*status doors closed and locked on left side in consist 4*)
	CI_L4_SDrsClsdRgt :	BOOL;(*status doors closed and locked on right side in consist 4*)
	CI_L4_SCabDrsClsdLft1 :	BOOL;(*status cab doors closed and locked on left side in consist 4*)
	CI_L4_SCabDrsClsdRgt1 :	BOOL;(*status cab doors closed and locked on right side in consist 4*)
	CI_L4_SCabDrsClsdLft2 :	BOOL;(*status cab doors closed and locked on left side in consist 4*)
	CI_L4_SCabDrsClsdRgt2 :	BOOL;(*status cab doors closed and locked on right side in consist 4*)
	CI_L4_SCabSalDrCls1 :	BOOL;(*status cab-saloon door closed cab 1*)
	CI_L4_SCabSalDrCls2 :	BOOL;(*status cab-saloon door closed cab 2*)
	CI_L4_SDrsObstclDetCls :	BOOL;(*statusobastacles are detected  in consist 4*)
	CI_L4_SClsDrsLft :	BOOL;(*feedback command close door on left side in consist 4*)
	CI_L4_SClsDrsRgt :	BOOL;(*feedback command close door on right side in consist 4*)
	CI_L4_SDiStp :	BOOL;(*feedback command disable steps in consist 4*)
	CI_L4_SDrsRlsdLft :	BOOL;(*status doors released on left side in consist 4*)
	CI_L4_SDrsRlsdRgt :	BOOL;(*status doors released on right side in consist 4*)
	CI_L4_SDrsOpndLft :	BOOL;(*status doors opened on left side in consist 4*)
	CI_L4_SDrsOpndRgt :	BOOL;(*status doors opened on right side in consist 4*)
	CI_L4_SEmAcsAct :	BOOL;(*status emergency access is active in consist 4*)
	CI_L4_SEmEgrAct :	BOOL;(*status emergency egress is active in consist 4*)
	CI_L4_SServKeyAct :	BOOL;(*status service key is active is active in consist 4*)
	C_VCCUOL1 :	BOOL;(*Status In from Bus Consist 1 valid*)
	C_VCCUOL2 :	BOOL;(*Status In from Bus Consist 2 valid*)
	C_VCCUOL3 :	BOOL;(*Status In from Bus Consist 3 valid*)
	C_VCCUOL4 :	BOOL;(*Status In from Bus Consist 4 valid*)
	CI_L1_SHwDrsClsLckCab1 :	BOOL;(*status door HW interlock Cab1 consist 1*)
	CI_L1_SHwDrsClsLckCab2 :	BOOL;(*status door HW interlock Cab 2 consist 1*)
	CI_L2_SHwDrsClsLckCab1 :	BOOL;(*status door HW interlock Cab1 consist 2*)
	CI_L2_SHwDrsClsLckCab2 :	BOOL;(*status door HW interlock Cab 2 consist 2*)
	CI_L3_SHwDrsClsLckCab1 :	BOOL;(*status door HW interlock Cab1 consist 3*)
	CI_L3_SHwDrsClsLckCab2 :	BOOL;(*status door HW interlock Cab 2 consist 3*)
	CI_L4_SHwDrsClsLckCab1 :	BOOL;(*status door HW interlock Cab1 consist 4*)
	CI_L4_SHwDrsClsLckCab2 :	BOOL;(*status door HW interlock Cab 2 consist 4*)
	CI_L1_SCndtMdLft :	BOOL;(*status conductor mode active on left side consist 1*)
	CI_L1_SCndtMdRgt :	BOOL;(*status conductor mode active on right side consist 1*)
	CI_L2_SCndtMdLft :	BOOL;(*status conductor mode active on left side consist 2*)
	CI_L2_SCndtMdRgt :	BOOL;(*status conductor mode active on right side consist 2*)
	CI_L3_SCndtMdLft :	BOOL;(*status conductor mode active on left side consist 3*)
	CI_L3_SCndtMdRgt :	BOOL;(*status conductor mode active on right side consist 3*)
	CI_L4_SCndtMdLft :	BOOL;(*status conductor mode active on left side consist 3*)
	CI_L4_SCndtMdRgt :	BOOL;(*status conductor mode active on right side consist 4*)
	CI_L1_SDrgDtcdLft :	BOOL;(*status drag detected on the left side consist 1*)
	CI_L1_SDrgDtcdRgt :	BOOL;(*status drag detected on the right side consist 1*)
	CI_L2_SDrgDtcdLft :	BOOL;(*status drag detected on the left side consist 2*)
	CI_L2_SDrgDtcdRgt :	BOOL;(*status drag detected on the right side consist 2*)
	CI_L3_SDrgDtcdLft :	BOOL;(*status drag detected on the left side consist 3*)
	CI_L3_SDrgDtcdRgt :	BOOL;(*status drag detected on the right side consist 3*)
	CI_L4_SDrgDtcdLft :	BOOL;(*status drag detected on the left side consist 4*)
	CI_L4_SDrgDtcdRgt :	BOOL;(*status drag detected on the right side consist 4*)
	CI_L1_SGrdPnlAct_1 :	BOOL;(*Guard's vestibule panel active (DM1)*)
	CI_L1_SGrdPnlAct_2 :	BOOL;(*Guard's vestibule panel active (DM2)*)
	CI_L1_SGrdPnlAct_3 :	BOOL;(*Guard's vestibule panel active (PM)*)
	CI_L1_SGrdPnlAct_4 :	BOOL;(*Guard's vestibule panel active (PM)*)
	CI_L1_SGrdPnlAct_5 :	BOOL;(*Guard's vestibule panel active (PM)*)
	CI_L2_SGrdPnlAct_1 :	BOOL;(*Guard's vestibule panel active (DM1)*)
	CI_L2_SGrdPnlAct_2 :	BOOL;(*Guard's vestibule panel active (DM2)*)
	CI_L2_SGrdPnlAct_3 :	BOOL;(*Guard's vestibule panel active (PM)*)
	CI_L2_SGrdPnlAct_4 :	BOOL;(*Guard's vestibule panel active (PM)*)
	CI_L2_SGrdPnlAct_5 :	BOOL;(*Guard's vestibule panel active (PM)*)
	CI_L3_SGrdPnlAct_1 :	BOOL;(*Guard's vestibule panel active (DM1)*)
	CI_L3_SGrdPnlAct_2 :	BOOL;(*Guard's vestibule panel active (DM2)*)
	CI_L3_SGrdPnlAct_3 :	BOOL;(*Guard's vestibule panel active (PM)*)
	CI_L3_SGrdPnlAct_4 :	BOOL;(*Guard's vestibule panel active (PM)*)
	CI_L3_SGrdPnlAct_5 :	BOOL;(*Guard's vestibule panel active (PM)*)
	CI_L4_SGrdPnlAct_1 :	BOOL;(*Guard's vestibule panel active (DM1)*)
	CI_L4_SGrdPnlAct_2 :	BOOL;(*Guard's vestibule panel active (DM2)*)
	CI_L4_SGrdPnlAct_3 :	BOOL;(*Guard's vestibule panel active (PM)*)
	CI_L4_SGrdPnlAct_4 :	BOOL;(*Guard's vestibule panel active (PM)*)
	CI_L4_SGrdPnlAct_5 :	BOOL;(*Guard's vestibule panel active (PM)*)
	CI_L1_SCrwPnlAct_1 :	BOOL;(*Crew Panel from DM*)
	CI_L1_SCrwPnlAct_3 :	BOOL;(*Crew Panel from DTW*)
	CI_L2_SCrwPnlAct_1 :	BOOL;(*Crew Panel from DM*)
	CI_L2_SCrwPnlAct_3 :	BOOL;(*Crew Panel from DTW*)
	CI_L3_SCrwPnlAct_1 :	BOOL;(*Crew Panel from DM*)
	CI_L3_SCrwPnlAct_3 :	BOOL;(*Crew Panel from DTW*)
	CI_L4_SCrwPnlAct_1 :	BOOL;(*Crew Panel from DM*)
	CI_L4_SCrwPnlAct_3 :	BOOL;(*Crew Panel from DTW*)
	CI_L1_CCrwPnlClsLft :	BOOL;(*Command to close left doors from Crew Panel*)
	CI_L2_CCrwPnlClsLft :	BOOL;(*Command to close left doors from Crew Panel*)
	CI_L3_CCrwPnlClsLft :	BOOL;(*Command to close left doors from Crew Panel*)
	CI_L4_CCrwPnlClsLft :	BOOL;(*Command to close left doors from Crew Panel*)
	CI_L1_CCrwPnlClsRgt :	BOOL;(*Command to close right doors from Crew Panel*)
	CI_L2_CCrwPnlClsRgt :	BOOL;(*Command to close right doors from Crew Panel*)
	CI_L3_CCrwPnlClsRgt :	BOOL;(*Command to close right doors from Crew Panel*)
	CI_L4_CCrwPnlClsRgt :	BOOL;(*Command to close right doors from Crew Panel*)
	CI_L1_SMntMdMC :	BOOL;(*Maintenance Mode signal coming from consist 1*)
	CI_L2_SMntMdMC :	BOOL;(*Maintenance Mode signal coming from consist 2*)
	CI_L3_SMntMdMC :	BOOL;(*Maintenance Mode signal coming from consist 3*)
	CI_L4_SMntMdMC :	BOOL;(*Maintenance Mode signal coming from consist 4*)
END_VAR


(*Group:Input - MIOs*)


VAR_INPUT
	CI_MIO_SDrIntrlckRly1_1 :	BOOL;(*Traction Door Interlock Relay 1 Cab1*)
	CI_MIO_SDrIntrlckRly1_1V :	BOOL;(*Traction Door Interlock Relay 1 Cab1 Valid*)
	CI_MIO_SDrIntrlckRly2_1 :	BOOL;(*Traction Door Interlock Relay 2 Cab1*)
	CI_MIO_SDrIntrlckRly2_1V :	BOOL;(*Traction Door Interlock Relay 2 Cab1 Valid*)
	CI_MIO_SDrIntrlckRly1_2 :	BOOL;(*Traction Door Interlock Relay 1 Cab2*)
	CI_MIO_SDrIntrlckRly1_2V :	BOOL;(*Traction Door Interlock Relay 1 Cab2 Valid*)
	CI_MIO_SDrIntrlckRly2_2 :	BOOL;(*Traction Door Interlock Relay 2 Cab2*)
	CI_MIO_SDrIntrlckRly2_2V :	BOOL;(*Traction Door Interlock Relay 2 Cab2 Valid*)
	CI_MIO_SDrTrIntrlckIsl_1 :	BOOL;(*Interlock Bypass Cab1*)
	CI_MIO_SDrTrIntrlckIsl_1V :	BOOL;(*Interlock Bypass Cab1 Valid*)
	CI_MIO_SDrTrIntrlckIsl_2 :	BOOL;(*Interlock Bypass Cab2*)
	CI_MIO_SDrTrIntrlckIsl_2V :	BOOL;(*Interlock Bypass Cab2Valid*)
	CI_MIO_SDrTrIntrlck_1 :	BOOL;(*Traction Interlock Cab1*)
	CI_MIO_SDrTrIntrlck_1V :	BOOL;(*Traction Interlock Cab1 valid*)
	CI_MIO_SDrTrIntrlck_2 :	BOOL;(*Traction Interlock Cab2*)
	CI_MIO_SDrTrIntrlck_2V :	BOOL;(*Traction Interlock Cab2 Valid*)
	CI_MIO_SCabDrOpSw1A_1 :	BOOL;(*Cab 1 door side A switch 1*)
	CI_MIO_SCabDrOpSw1A_1V :	BOOL;(*Cab 1 door side A switch 1 valid*)
	CI_MIO_SCabDrOpSw2A_1 :	BOOL;(*Cab 1 door side A switch 2*)
	CI_MIO_SCabDrOpSw2A_1V :	BOOL;(*Cab 1 door side A switch 2 valid*)
	CI_MIO_SCabDrOpSw1B_1 :	BOOL;(*Cab 1 door side B switch 1*)
	CI_MIO_SCabDrOpSw1B_1V :	BOOL;(*Cab 1 door side B switch 1 valid*)
	CI_MIO_SCabDrOpSw2B_1 :	BOOL;(*Cab 1 door side B switch 2*)
	CI_MIO_SCabDrOpSw2B_1V :	BOOL;(*Cab 1 door side B switch 2 valid*)
	CI_MIO_SCabDrOpSw1A_2 :	BOOL;(*Cab 2 door side A switch 1*)
	CI_MIO_SCabDrOpSw1A_2V :	BOOL;(*Cab 2 door side A switch 1 valid*)
	CI_MIO_SCabDrOpSw2A_2 :	BOOL;(*Cab 2 door side A switch 2*)
	CI_MIO_SCabDrOpSw2A_2V :	BOOL;(*Cab 2 door side A switch 2 valid*)
	CI_MIO_SCabDrOpSw1B_2 :	BOOL;(*Cab 2 door side B switch 1*)
	CI_MIO_SCabDrOpSw1B_2V :	BOOL;(*Cab 2 door side B switch 1 valid*)
	CI_MIO_SCabDrOpSw2B_2 :	BOOL;(*Cab 2 door side B switch 2*)
	CI_MIO_SCabDrOpSw2B_2V :	BOOL;(*Cab 2 door side B switch 2 valid*)
	CI_MIO_SCabSalDrCl_1 :	BOOL;(*Cab - Saloon door closed Cab 1*)
	CI_MIO_SCabSalDrCl_1V :	BOOL;(*Cab - Saloon door closed Cab 1 valid*)
	CI_MIO_SCabSalDrCl_2 :	BOOL;(*Cab - Saloon door closed Cab 2*)
	CI_MIO_SCabSalDrCl_2V :	BOOL;(*Cab - Saloon door closed Cab 2 valid*)
	CI_MIO_SDrClPbRgt_1 :	BOOL;(*Door close pushbuttons Right cab 1*)
	CI_MIO_SDrClPbRgt_1V :	BOOL;(*Door close pushbuttons Right cab 1  valid bit*)
	CI_MIO_SDrClPbRgt_2 :	BOOL;(*Door close pushbuttons Right cab 2*)
	CI_MIO_SDrClPbRgt_2V :	BOOL;(*Door close pushbuttons Right cab 2 valid bit*)
	CI_MIO_SDrClPbLft_1 :	BOOL;(*Door close pushbuttons Left cab 1*)
	CI_MIO_SDrClPbLft_1V :	BOOL;(*Door close pushbuttons Left cab 1  valid bit*)
	CI_MIO_SDrClPbLft_2 :	BOOL;(*Door close pushbuttons Left cab 2*)
	CI_MIO_SDrClPbLft_2V :	BOOL;(*Door close pushbuttons Left cab 2 valid bit*)
	CI_MIO_SDrClPbLft2_1 :	BOOL;(*Door close pushbuttons Left cab 1 (CabSide Wall)*)
	CI_MIO_SDrClPbLft2_1V :	BOOL;(*Door close pushbuttons Left cab 1 (CabSide Wall) valid bit*)
	CI_MIO_SDrClPbRgt2_1 :	BOOL;(*Door close pushbuttons Right cab 2 (CabSide Wall)*)
	CI_MIO_SDrClPbRgt2_1V :	BOOL;(*Door close pushbuttons Right cab 2 (CabSide Wall) valid bit*)
	CI_MIO_SDrClPbLft2_2 :	BOOL;(*Door close pushbuttons Left cab 1 (CabSide Wall)*)
	CI_MIO_SDrClPbLft2_2V :	BOOL;(*Door close pushbuttons Left cab 1 (CabSide Wall) valid bit*)
	CI_MIO_SDrClPbRgt2_2 :	BOOL;(*Door close pushbuttons Right cab 2 (CabSide Wall)*)
	CI_MIO_SDrClPbRgt2_2V :	BOOL;(*Door close pushbuttons Right cab 2 (CabSide Wall) valid bit*)
	CI_MIO_SDrRelPbRgt1_1 :	BOOL;
	CI_MIO_SDrRelPbLft1_1 :	BOOL;
	CI_MIO_SDrRelPbLft1_1V :	BOOL;
	CI_MIO_SDrRelPbRgt1_1V :	BOOL;
	CI_MIO_SDrRelPbRgt1_2 :	BOOL;
	CI_MIO_SDrRelPbLft1_2 :	BOOL;
	CI_MIO_SDrRelPbRgt1_2V :	BOOL;
	CI_MIO_SDrRelPbLft1_2V :	BOOL;
	(*<CI_MIO_SSDrRelPbRgt1_1 :	BOOL;>*)(*Door release pushbuttons Right Input 1 cab 1*)
	(*<CI_MIO_SSDrRelPbRgt1_1V :	BOOL;>*)(*Door release pushbuttons Right Input 1 cab 1 valid bit*)
	(*<CI_MIO_SSDrRelPbLft1_1 :	BOOL;>*)(*Door release pushbuttons Left Input 1 cab 1*)
	(*<CI_MIO_SSDrRelPbLft1_1V :	BOOL;>*)(*Door release pushbuttons Left Input 1 cab 1 valid bit*)
	(*<CI_MIO_SSDrRelPbRgt1_2 :	BOOL;>*)(*Door release pushbuttons Right Input 1 cab 2*)
	(*<CI_MIO_SSDrRelPbRgt1_2V :	BOOL;>*)(*Door release pushbuttons Right Input 1 cab 2 valid bit*)
	(*<CI_MIO_SSDrRelPbLft1_2 :	BOOL;>*)(*Door release pushbuttons Left Input 1 cab 2*)
	(*<CI_MIO_SSDrRelPbLft1_2V :	BOOL;>*)(*Door release pushbuttons Left Input 1 cab 2 valid bit*)
	CI_MIO_SFltAlmAck_1 :	BOOL;(*Alarm Acknowledgement - CSDE Wrong side in cab1*)
	CI_MIO_SFltAlmAck_1V :	BOOL;(*Validity - Alarm Acknowledgement - CSDE Wrong side in cab1*)
	CI_MIO_SFltAlmAck_2 :	BOOL;(*Alarm Acknowledgement - CSDE Wrong side in cab2*)
	CI_MIO_SFltAlmAck_2V :	BOOL;(*Validity - Alarm Acknowledgement - CSDE Wrong side in cab2*)
	CI_MIO_SSalCrwPnlAct_1 :	BOOL;(*Guard's vestibule panel active (DM1)*)
	CI_MIO_SSalCrwPnlAct_1V :	BOOL;(*Guard's vestibule panel active (DM1) validity*)
	CI_MIO_SSalCrwPnlAct_2 :	BOOL;(*Guard's vestibule panel active (DM2)*)
	CI_MIO_SSalCrwPnlAct_2V :	BOOL;(*Guard's vestibule panel active (DM2) validity*)
	CI_MIO_SSalCrwPnlAct_3 :	BOOL;(*Guard's vestibule panel active (PMLW)*)
	CI_MIO_SSalCrwPnlAct_3V :	BOOL;(*Guard's vestibule panel active (PMLW) validity*)
	CI_MIO_SSalCrwPnlAct_4 :	BOOL;(*Guard's vestibule panel active (M1L)*)
	CI_MIO_SSalCrwPnlAct_4V :	BOOL;(*Guard's vestibule panel active (M1L) validity*)
	CI_MIO_SSalCrwPnlAct_5 :	BOOL;(*Guard's vestibule panel active (M2L)*)
	CI_MIO_SSalCrwPnlAct_5V :	BOOL;(*Guard's vestibule panel active (M2L) validity*)
	CI_MIO_SSalCrwDrClPbRgt_1 :	BOOL;(*Saloon crew close all right doors pushbutton active car DM1*)
	CI_MIO_SSalCrwDrClPbRgt_1V :	BOOL;(*Saloon crew close all right doors pushbutton active car DM1 validity*)
	CI_MIO_SSalCrwDrClPbLft_1 :	BOOL;(*Saloon crew close all left doors pushbutton active car DM1*)
	CI_MIO_SSalCrwDrClPbLft_1V :	BOOL;(*Saloon crew close all left doors pushbutton active car DM1 validity*)
	CI_MIO_SSalCrwDrClPbRgt_2 :	BOOL;(*Saloon crew close all right doors pushbutton active car DM2*)
	CI_MIO_SSalCrwDrClPbRgt_2V :	BOOL;(*Saloon crew close all right doors pushbutton active car DM2 validity*)
	CI_MIO_SSalCrwDrClPbLft_2 :	BOOL;(*Saloon crew close all left doors pushbutton active car DM2*)
	CI_MIO_SSalCrwDrClPbLft_2V :	BOOL;(*Saloon crew close all left doors pushbutton active car DM2 validity*)
	CI_MIO_SSalCrwDrClPbRgt_3 :	BOOL;(*Saloon crew close all right doors pushbutton active car PMLW*)
	CI_MIO_SSalCrwDrClPbRgt_3V :	BOOL;(*Saloon crew close all right doors pushbutton active car PMLW validity*)
	CI_MIO_SSalCrwDrClPbLft_3 :	BOOL;(*Saloon crew close all left doors pushbutton active car PMLW*)
	CI_MIO_SSalCrwDrClPbLft_3V :	BOOL;(*Saloon crew close all left doors pushbutton active car PMLWvalidity*)
	CI_MIO_SSalCrwDrClPbRgt_4 :	BOOL;(*Saloon crew close all right doors pushbutton active car M1L*)
	CI_MIO_SSalCrwDrClPbRgt_4V :	BOOL;(*Saloon crew close all right doors pushbutton active car M1L validity*)
	CI_MIO_SSalCrwDrClPbLft_4 :	BOOL;(*Saloon crew close all left doors pushbutton active car M1L*)
	CI_MIO_SSalCrwDrClPbLft_4V :	BOOL;(*Saloon crew close all left doors pushbutton active car M1L validity*)
	CI_MIO_SSalCrwDrClPbRgt_5 :	BOOL;(*Saloon crew close all right doors pushbutton active car M2L*)
	CI_MIO_SSalCrwDrClPbRgt_5V :	BOOL;(*Saloon crew close all right doors pushbutton active car M2L validity*)
	CI_MIO_SSalCrwDrClPbLft_5 :	BOOL;(*Saloon crew close all left doors pushbutton active car M2L*)
	CI_MIO_SSalCrwDrClPbLft_5V :	BOOL;(*Saloon crew close all left doors pushbutton active car M2L validity*)
	CI_MIO_SCrwPnlAct_1 :	BOOL;(*Saloon crew close all left doors pushbutton active car M2L validity*)
	CI_MIO_SCrwPnlAct_1V :	BOOL;(*Saloon crew close all left doors pushbutton active car M2L validity*)
	CI_MIO_SCrwPnlAct_2 :	BOOL;(*Saloon crew close all left doors pushbutton active car M2L validity*)
	CI_MIO_SCrwPnlAct_2V :	BOOL;(*Saloon crew close all left doors pushbutton active car M2L validity*)
	CI_MIO_SSnstvEdgDeact_1 :	BOOL;(*Drag Detection Feedback is active on Cab 1 (Sensitive edge deactivated)*)
	CI_MIO_SSnstvEdgDeact_2 :	BOOL;(*Drag Detection Feedback is active on Cab 2 (Sensitive edge deactivated)*)
	CI_MIO_SEmBrRly_1 :	BOOL;(*Release EB Signal 1 (Emergency brake relay energised)*)
	CI_MIO_SEmBrRly_2 :	BOOL;(*Release EB Signal 2 (Emergency brake relay energised)*)
END_VAR


VAR
	CI_1DCUA_LeftDoorwayKey :	BOOL;(*Door A Car1 LeftDoorway Key Act*)
	CI_1DCUA_RightDoorwayKey :	BOOL;(*Door A Car1 RightDoorway Key Act*)
	CI_1DCUC_LeftDoorwayKey :	BOOL;(*Door C  Car1 LeftDoorway Key Act*)
	CI_1DCUC_RightDoorwayKey :	BOOL;(*Door C Car1 RightDoorway Key Act*)
	CI_1DCUD_LeftDoorwayKey :	BOOL;(*Door D  Car1 LeftDoorway Key Act*)
	CI_1DCUD_RightDoorwayKey :	BOOL;(*Door D Car1 RightDoorway Key Act*)
	CI_1DCUF_LeftDoorwayKey :	BOOL;(*Door F Car1 LeftDoorway Key Act*)
	CI_1DCUF_RightDoorwayKey :	BOOL;(*Door F Car1 RightDoorway Key Act*)
	CI_2DCUA_LeftDoorwayKey :	BOOL;(*Door A Car2 LeftDoorway Key Act*)
	CI_2DCUA_RightDoorwayKey :	BOOL;(*Door A Car2 RightDoorway Key Act*)
	CI_2DCUC_LeftDoorwayKey :	BOOL;(*Door C  Car2 LeftDoorway Key Act*)
	CI_2DCUC_RightDoorwayKey :	BOOL;(*Door C Car2 RightDoorway Key Act*)
	CI_2DCUD_LeftDoorwayKey :	BOOL;(*Door D  Car2 LeftDoorway Key Act*)
	CI_2DCUD_RightDoorwayKey :	BOOL;(*Door D Car2 RightDoorway Key Act*)
	CI_2DCUF_LeftDoorwayKey :	BOOL;(*Door F Car2 LeftDoorway Key Act*)
	CI_2DCUF_RightDoorwayKey :	BOOL;(*Door F Car2 RightDoorway Key Act*)
END_VAR


VAR_INPUT
	CI_DCUA1_SSdoEnFb :	BOOL;(*ASDO Enable HW Feedback car 1 door A*)
	CI_DCUF1_SSdoEnFb :	BOOL;(*ASDO Enable HW Feedback car 1 door F*)
	CI_DCUA3_SSdoEnFb :	BOOL;(*ASDO Enable HW Feedback car 2 door A*)
	CI_DCUF3_SSdoEnFb :	BOOL;(*ASDO Enable HW Feedback car 2 door F*)
END_VAR


(*Group:Input - HMI*)


VAR_INPUT
	CI_HMI_STrnClrMd :	BOOL := FALSE;(*train clearence mode*)
	CI_HMI_ASfEvt :	BOOL := FALSE;(*Alarm acknowledgement (CSDE wrong side)*)
	CI_HMI_SDrOp :	BOOL := FALSE;(*Driver sends an open command to all doors on the train from active cab*)
	C_VHMICtrlMs :	BOOL := FALSE;(*Validity bit for iHMISCtrlMs telegram (Door open request)*)
	CI_HMI_XDrCcl :	UDINT := UDINT#0;(*Number of door cycles.*)
	CI_HMI_SDrCclPb :	BOOL := FALSE;(*Door cycle pushbutton*)
	CI_HMI_SDrCclPausePb :	BOOL := FALSE;(*Door cycling pause pushbutton.*)
	CI_HMI_SDrCclAbortPb :	BOOL := FALSE;(*Door cycling abort pushbutton.*)
	CI_HMI_SDrCclEnAllPb :	BOOL := FALSE;(*Door Cycle Enable "All" pushbutton.*)
	CI_HMI_SCar1DrCclA :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar1DrCclC :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar1DrCclD :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar1DrCclF :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar2DrCclA :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar2DrCclC :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar2DrCclD :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar2DrCclF :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar3DrCclA :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar3DrCclC :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar3DrCclD :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar3DrCclF :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar4DrCclA :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar4DrCclC :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar4DrCclD :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar4DrCclF :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar5DrCclA :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar5DrCclC :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar5DrCclD :	BOOL;(*Cycling test, DCUA ... DCUF.*)
	CI_HMI_SCar5DrCclF :	BOOL;(*Cycling test, DCUA ... DCUF.*)
END_VAR


(*Group:Input - CCUS*)


VAR_INPUT
	(*<CI_CCUS_SPibsIslV :	UINT;>*)(*Validity: PIBS Isolated Active*)
	CI_CCUS_SAsdoIslV :	UINT;(*Validity: ASDO Isolated Active*)
	CI_CCUS_SCar1DrSdoEnAF :	BOOL := FALSE;(*Doors A&F in Car 1 ASDO Enable pattern*)
	CI_CCUS_SCar1DrSdoEnCD :	BOOL := FALSE;(*Doors C&D in Car 1 ASDO Enable pattern*)
	CI_CCUS_SCar2DrSdoEnAF :	BOOL := FALSE;(*Doors A&F in Car 2 ASDO Enable pattern*)
	CI_CCUS_SCar2DrSdoEnCD :	BOOL := FALSE;(*Doors C&D in Car 2 ASDO Enable pattern*)
	CI_CCUS_SCar3DrSdoEnAF :	BOOL := FALSE;(*Doors A&F in Car 3 ASDO Enable pattern*)
	CI_CCUS_SCar3DrSdoEnCD :	BOOL := FALSE;(*Doors C&D in Car 3 ASDO Enable pattern*)
	CI_CCUS_SCar4DrSdoEnAF :	BOOL := FALSE;(*Doors A&F in Car 4 ASDO Enable pattern*)
	CI_CCUS_SCar4DrSdoEnCD :	BOOL := FALSE;(*Doors C&D in Car 4 ASDO Enable pattern*)
	CI_CCUS_SCar5DrSdoEnAF :	BOOL := FALSE;(*Doors A&F in Car 5 ASDO Enable pattern*)
	CI_CCUS_SCar5DrSdoEnCD :	BOOL := FALSE;(*Doors C&D in Car 5 ASDO Enable pattern*)
	CI_CCUS_SSdoByp :	BOOL := FALSE;(*ASDO SW bypass*)
	(*<CI_CCUS_SSdoV :	BOOL := FALSE;>*)(*Validity bit for ASDO informations*)
	CI_CCUS_SCsdePtfmLft :	BOOL := FALSE;(*CSDE data - RFID platform left*)
	CI_CCUS_SCsdePtfmRgt :	BOOL := FALSE;(*CSDE data - RFID platform right*)
	CI_CCUS_SCsdeTagRead :	BOOL := FALSE;(*CSDE data - RFID tag data available*)
	CI_CCUS_SCsdeTagExpected :	BOOL := FALSE;(*CSDE data - RFID tag is expected*)
	CI_CCUS_SCsdeV :	BOOL := FALSE;(*Validity bit for CSDE informations*)
	CI_CCUS_SSwLoSpd :	BOOL := FALSE;(*low speed status signal*)
	CI_CCUS_SPIBSFlt :	BOOL := FALSE;(*Status: PIBS Fault*)
	CI_CCUS_SLocConfirmed :	BOOL := FALSE;(*Location confirmed*)
	CI_CCUS_SPibsIsl :	BOOL := FALSE;(*PIBS is isolated*)
	CI_CCUS_XTotDistTrp :	UDINT;(*Total Distance from trip*)
	CI_CCUS_SXCabStTrn :	USINT := USINT#0;(*Cab Status from CCUS, value translates to which cab is active*)
	CI_CCUS_SAsdoOvrdAvl :	BOOL;(*ASDO override available (The Automatic Selective Door Operation (ASDO) System has detected that data is missing.)*)
	(*<CI_CCUS_XsafAckSysReqMs :	UINT;>*)(*ADSO Safe test request (ASDO safe test request is TRUE when this is equal to 23)*)
	CI_CCUS_SCar1DrSdoEnAFRed :	BOOL;(*ASDO Enable Request Red car 1 doors A and F*)
	CI_CCUS_SCar3DrSdoEnAFRed :	BOOL;(*ASDO Enable Request Red car 3 doors A and F*)
	CI_CCUS_SCar1DrSdoEnAFSaf :	BOOL;(*ASDO Enable Request Safe car 1 doors A and F*)
	CI_CCUS_SCar3DrSdoEnAFSaf :	BOOL;(*ASDO Enable Request Safe car 3 doors A and F*)
	CI_CCUS_SCar1DrSdoEnAFRedSaf :	BOOL;(*ASDO Enable Request Red Safe car 1 doors A and F*)
	CI_CCUS_SSASDOSafeTestSt :	USINT;(*ASDO Safe Test command*)
	CI_CCUS_SSASDOSafeTestResultSt :	USINT;(*ASDO Safe Test End Status*)
	CI_CCUS_SCar3DrSdoEnAFRedSaf :	BOOL;(*ASDO Enable Request Red Safe car 3 doors A and F*)
	CI_CCUS_XOwnCst :	USINT;(*Own consist Entry coming  from CCUS*)
	CI_CCUS_SDrgDetNotAct1 :	BOOL;(*Drag detection not active in cab 1*)
	CI_CCUS_SDrgDetNotAct2 :	BOOL;(*Drag detection not active in cab 2*)
	CI_CCUS_EMissDoor :	BOOL;(*CCUS: TCMS has detected that not all expected doors have been determined within the train*)
	CI_CCUS_EDuplDoor :	BOOL;(*CCUS: TCMS has detected a mismatch between the doors in different Consists (two consist have calculated that they have the same doors).*)
	CI_CCUS_ZNxtStnRelPttrn1 :	UDINT;(*CCUS: Next Station Release Pattern most significant bits*)
	CI_CCUS_ZNxtStnRelPttrn2 :	UDINT;(*CCUS: Next Station Release Pattern least significant bits*)
	(*<CI_CCUS_SPk44Conflict :	BOOL;>*)(*CCUS:PK44 Conflict*)
	(*<CI_CCUS_SPk44PltfrmLft :	BOOL;>*)(*CCUS:PK44 Platform side left*)
	(*<CI_CCUS_SPk44PltfrmRgt :	BOOL;>*)(*CCUS:PK44 Platform side right*)
	(*<CI_CCUS_SPk44DataRcvd :	BOOL;>*)(*CCUS:PK44 Data received*)
	(*<CI_CCUS_SPk44DataStrd :	BOOL;>*)(*CCUS:PK44 Data stored*)
	(*<CI_CCUS_SPk44Expected :	BOOL;>*)(*CCUS:PK44 Expected*)
END_VAR


(*Group:Input - CCUC*)


VAR_INPUT
	CI_CCUC_SPosOnSegment :	USINT := USINT#0;(*Train at(1)/after(2)/before station(3)*)
END_VAR


(*Group:Input -TDR*)


VAR_INPUT
	CI_TDR_SDiDrRelSideA :	BOOL;(*TDR TW Feedback - Door Release Side A*)
	CI_TDR_SDiDrRelSideB :	BOOL;(*TDR TW Feedback - Door Release Side B*)
	CI_TDR_SDiDrClSideA :	BOOL;(*TDR TW Feedback - Door Close Side A*)
	CI_TDR_SDiDrClSideB :	BOOL;(*TDR TW Feedback - Door Close Side B*)
	C_VTDR :	BOOL;(*TDR valid*)
	CI_TDR_SDoColdMvmnt :	BOOL;(*Cold movement detected*)
END_VAR


(*Group:Output to family- UserIf*)


VAR_OUTPUT
	PAD_RClDrsA01 :	BOOL := FALSE;(*Request to close A-side doors  from cab 1*)
	PAD_RClDrsA01V :	BOOL := FALSE;(*Validity Signal for request to close A-side doors  from cab 1*)
	PAD_RClDrsB01 :	BOOL := FALSE;(*Request to close B-side doors  from cab 1*)
	PAD_RClDrsB01V :	BOOL := FALSE;(*Validity Signal for request to close B-side doors  from cab 1*)
	PAD_RClDrsA02 :	BOOL := FALSE;(*Request to close A-side doors from cab 2*)
	PAD_RClDrsA02V :	BOOL := FALSE;(*Validity Signal for request to close A-side doors from cab 2*)
	PAD_RClDrsB02 :	BOOL := FALSE;(*Request to close B-side doors  from cab 2*)
	PAD_RClDrsB02V :	BOOL := FALSE;(*Validity Signal for request to close B-side doors  from cab 2*)
	PAD_RClDrsASd01 :	BOOL := FALSE;(*Door close pushbuttons A side cab 1 (CabSide Wall)*)
	PAD_RClDrsASd01V :	BOOL := FALSE;(*Door close pushbuttons A side cab 1 (CabSide Wall) valid bit*)
	PAD_RClDrsBSd01 :	BOOL := FALSE;(*Door close pushbuttons B side cab 1 (CabSide Wall)*)
	PAD_RClDrsBSd01V :	BOOL := FALSE;(*Door close pushbuttons B side cab 1 (CabSide Wall) valid bit*)
	PAD_RClDrsBSd02 :	BOOL := FALSE;(*Door close pushbuttons B side cab 2 (CabSide Wall)*)
	PAD_RClDrsBSd02V :	BOOL := FALSE;(*Door close pushbuttons B side cab 2 (CabSide Wall) valid bit*)
	PAD_RClDrsASd02 :	BOOL := FALSE;(*Door close pushbuttons A side cab 2 (CabSide Wall)*)
	PAD_RClDrsASd02V :	BOOL := FALSE;(*Door close pushbuttons A side cab 2 (CabSide Wall) valid bit*)
	PAD_ROpDrs01 :	BOOL := FALSE;(*Request to open doors  from cab 1*)
	PAD_ROpDrs01V :	BOOL := FALSE;(*Validity Signal for request to open doors  from cab 1*)
	PAD_ROpDrs02 :	BOOL := FALSE;(*Request to open doors from cab 2*)
	PAD_ROpDrs02V :	BOOL := FALSE;(*Validity Signal for request to open doors from cab 2*)
	PAD_RSideA01 :	BOOL := FALSE;(*Request to select A-side for release & open doors from cab 1*)
	PAD_RSideA01V :	BOOL := FALSE;(*Validity Signal for request to select A-side for release & open doors  from cab 1*)
	PAD_RSideB01 :	BOOL := FALSE;(*Request to select B-side for release & open doors  from cab 1*)
	PAD_RSideB01V :	BOOL := FALSE;(*Validity Signal for request to select B- side for release & open doors  from cab 1*)
	PAD_RRlsDrs01 :	BOOL := FALSE;(*Request to release doors  from cab 1*)
	PAD_RRlsDrs01V :	BOOL := FALSE;(*Validity Signal for request to release doors  from cab 1*)
	PAD_RSideA02 :	BOOL := FALSE;(*Request to select A-side for release & open doors  from cab 2*)
	PAD_RSideA02V :	BOOL := FALSE;(*Validity Signal for request to select A-side for release & open doors from cab 2*)
	PAD_RSideB02 :	BOOL := FALSE;(*Request to select B-side for release & open doors from cab 2*)
	PAD_RSideB02V :	BOOL := FALSE;(*Validity Signal for request to select B-side for release & open doors from cab 2*)
	PAD_RRlsDrs02 :	BOOL := FALSE;(*Request to release doors from cab 2*)
	PAD_RRlsDrs02V :	BOOL := FALSE;(*Validity Signal forRequest to release doors from cab 2*)
	PAD_PCabCpldNeeded :	BOOL := FALSE;(*(LOT) "Cab coupled" condition is used to set the enable release signals*)
	PAD_PGrdPnlUsd :	BOOL := FALSE;(*(SWR) "Guard Panel" condition is used to set the enable release signals*)
	PAD_GrdOnlyMd :	BOOL;
	PAD_SGrdPnlAct_01_1 :	BOOL;(*Guard's cst1 vestibule panel active (DTLW)*)
	PAD_SGrdPnlAct_01_2 :	BOOL;(*Guard's cst1 vestibule panel active (M2)*)
	PAD_SGrdPnlAct_01_3 :	BOOL;(*Guard's cst1 vestibule panel active (DM)*)
	PAD_SGrdPnlAct_01_4 :	BOOL;(*Guard's cst1 vestibule panel active (DM)*)
	PAD_SGrdPnlAct_01_5 :	BOOL;(*Guard's cst1 vestibule panel active (DM)*)
	PAD_SGrdPnlAct_02_1 :	BOOL;(*Guard's cst2 vestibule panel active (DTLW)*)
	PAD_SGrdPnlAct_02_2 :	BOOL;(*Guard's cst2 vestibule panel active (M2)*)
	PAD_SGrdPnlAct_02_3 :	BOOL;(*Guard's cst2 vestibule panel active (DM)*)
	PAD_SGrdPnlAct_02_4 :	BOOL;(*Guard's cst2 vestibule panel active (DM)*)
	PAD_SGrdPnlAct_02_5 :	BOOL;(*Guard's cst2 vestibule panel active (DM)*)
	PAD_SGrdPnlAct_03_1 :	BOOL;(*Guard's cst3 vestibule panel active (DTLW)*)
	PAD_SGrdPnlAct_03_2 :	BOOL;(*Guard's cst3 vestibule panel active (M2)*)
	PAD_SGrdPnlAct_03_3 :	BOOL;(*Guard's cst3 vestibule panel active (DM)*)
	PAD_SGrdPnlAct_03_4 :	BOOL;(*Guard's cst3 vestibule panel active (DM)*)
	PAD_SGrdPnlAct_03_5 :	BOOL;(*Guard's cst3 vestibule panel active (DM)*)
	PAD_SGrdPnlAct_04_1 :	BOOL;(*Guard's cst4 vestibule panel active (DTLW)*)
	PAD_SGrdPnlAct_04_2 :	BOOL;(*Guard's cst4 vestibule panel active (DM2)*)
	PAD_SGrdPnlAct_04_3 :	BOOL;(*Guard's cst4 vestibule panel active (DM)*)
	PAD_SGrdPnlAct_04_4 :	BOOL;(*Guard's cst4 vestibule panel active (DM)*)
	PAD_SGrdPnlAct_04_5 :	BOOL;(*Guard's cst4 vestibule panel active (DM)*)
	PAD_SCrwPnlAct_01_1 :	BOOL;(*Crew Panel cst1 vestibule panel active (DM)*)
	PAD_SCrwPnlAct_01_3 :	BOOL;(*Crew Panel cst1 vestibule panel active (DTLW)*)
	PAD_SCrwPnlAct_02_1 :	BOOL;(*Crew Panel cst2 vestibule panel active (DM)*)
	PAD_SCrwPnlAct_02_3 :	BOOL;(*Crew Panel cst2 vestibule panel active (DM)*)
	PAD_SCrwPnlAct_03_1 :	BOOL;(*Crew Panel cst2 vestibule panel active (DM)*)
	PAD_SCrwPnlAct_03_3 :	BOOL;(*Crew Panel cst3 vestibule panel active (DM)*)
	PAD_SCrwPnlAct_04_1 :	BOOL;(*Crew Panel cst3 vestibule panel active (DM)*)
	PAD_SCrwPnlAct_04_3 :	BOOL;(*Crew Panel cst4 vestibule panel active (DM)*)
	PAD_CPnlDrClLft :	BOOL;(*Command to left door close from crew panel*)
	PAD_CPnlDrClRgt :	BOOL;(*Command to left door close from crew panel*)
	PAD_RTrnClDrsRgt :	BOOL;(*Trainwide request to close doors on the right side of the train*)
	PAD_RTrnClDrsLft :	BOOL;(*Trainwide request to close doors on the Left side of the train*)
	PAD_SPk44Conflict :	BOOL;(*PK44 Conflict*)
	PAD_SPk44PltfrmLft :	BOOL;(*PK44 Platform side left*)
	PAD_SPk44PltfrmRgt :	BOOL;(*PK44 Platform side right*)
	PAD_SPk44DataRcvd :	BOOL;(*PK44 Data received*)
	PAD_SPk44DataStrd :	BOOL;(*PK44 Data stored*)
	PAD_SPk44Expected :	BOOL;(*PK44 Expected*)
	PAD_PPk44SideSelProj :	BYTE;(*Parameter to allow PK44 side selection in SWR. For SWR value - 251, For other projects Value- 63*)
END_VAR


(*Group:Output to family - Train*)


VAR_OUTPUT
	PAD_StatusFromBus_01 :	PadGDrsStatusGwIn;(*Status information to train bus from node 01*)
	PAD_StatusFromBus_02 :	PadGDrsStatusGwIn;(*Status information to train bus from node 02*)
	PAD_StatusFromBus_03 :	PadGDrsStatusGwIn;(*Status information to train bus from node 03*)
	PAD_StatusFromBus_04 :	PadGDrsStatusGwIn;(*Status information to train bus from node 04*)
	PAD_CmdFromBus :	PadGDrsCmdGwIn;(*Commands to be received from train bus in the consist*)
END_VAR


(*Group:Output to generic - from other FA*)


VAR_OUTPUT
	TC_CabActive :	TcCabActivationData;(*cab activation data from TC*)
	TC_MyConsist :	TcMyConsist;(*structure with datas for my consist from TC*)
	TC_TrainConfig :	TcTrainConfig;(*structure with datas from train configuration*)
	DCM_CstState :	DcmCstState;(*contain train relevant information like train speed, still stand and so on.*)
	TC_SubOpMode :	TcSubOpMode;(*structure with datas about sub opmodes*)
	SCTR_SysInit :	SctrSystemInit;(*system init information*)
	PIS_STrnAtStn :	BOOL := FALSE;(*train is at station from PIS on CCU-C*)
	AC_STrnFireDtc :	BOOL;(*Fire detected in the train (need to be available in all consists)*)
END_VAR


(*Group:Output - project extension*)


VAR_OUTPUT
	PAD_CarIn01 :	PadFCarIn;(*Family : Consist : All data related to a car1 from other HLFG as Input.*)
	PAD_CarIn02 :	PadFCarIn;(*Family : Consist : All data related to a car2 from other HLFG as Input.*)
	PAD_CarIn03 :	PadFCarIn;(*Family : Consist : All data related to a car3 from other HLFG as Input.*)
	PAD_CarIn04 :	PadFCarIn;(*Family : Consist : All data related to a car4 from other HLFG as Input.*)
	PAD_CarIn05 :	PadFCarIn;(*Family : Consist : All data related to a car5 from other HLFG as Input.*)
	PAD_HwDoorLoop :	PadGCstDoorLoopHw;(*Family : HW-Interlock Signals*)
	PAD_SdoByPass :	BOOL;(*Family : ASDO bypass*)
	PAD_SdoByPassV :	BOOL;(*Family : validity for ASDO bypass*)
	PAD_CsdeData :	PadFCsde;(*Family : CSDE data*)
	PAD_RCsdeAlmAck :	BOOL;(*Family : CSDE wrong side alarm acknowledgment*)
	PAD_SDrTrmMdPrsdHMI :	BOOL;(*Terminal Station Mode Button Pressed from HMI*)
	PAD_PTClearTrnCl :	TIME;(*Clear train closing time parameter*)
	(*<PAD_SCrwPnlAct_1 :	BOOL;>*)(*Crew Panel 1 is active*)
	(*<PAD_SCrwPnlAct_2 :	BOOL;>*)(*Crew Panel 2 is active*)
	PAD_CCrewSwitchAct :	BOOL;(*Crew switch active (0: active, 1: not active)*)
	PAD_SDrTrmMdCst :	BOOL;(*Terminal Station Mode Active in consist*)
	PAD_Dcu_ZOp_01 :	USINT;(*Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)*)
	PAD_Dcu_ZOp_02 :	USINT;(*Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)*)
	PAD_Dcu_ZOp_03 :	USINT;(*Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)*)
	PAD_Dcu_ZOp_04 :	USINT;(*Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)*)
	PAD_Dcu_ZOp_05 :	USINT;(*Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)*)
	PAD_Dcu_ZCl_01 :	USINT;(*Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)*)
	PAD_Dcu_ZCl_02 :	USINT;(*Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)*)
	PAD_Dcu_ZCl_03 :	USINT;(*Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)*)
	PAD_Dcu_ZCl_04 :	USINT;(*Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)*)
	PAD_Dcu_ZCl_05 :	USINT;(*Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)*)
	PAD_PCarExists :	WORD;(*indicates which cars exits in consist*)
	PAD_SDiDrRelSideA :	BOOL;(*TDR TW Feedback - Door Release Side A*)
	PAD_SDiDrRelSideB :	BOOL;(*TDR TW Feedback - Door Release Side B*)
	PAD_SDiDrClSideA :	BOOL;(*TDR TW Feedback - Door Close Side A*)
	PAD_SDiDrClSideB :	BOOL;(*TDR TW Feedback - Door Close Side B*)
	PAD_STdrV :	BOOL;(*TDR valid*)
	PAD_SSalCrwPnlAct_1 :	BOOL;(*Saloon crew panel active in car DM1 - internal*)
	PAD_SSalCrwPnlAct_2 :	BOOL;(*Saloon crew panel active in car PMWL - internal*)
	PAD_SSalCrwPnlAct_5 :	BOOL;(*Saloon crew panel active in car M2L - internal*)
	PAD_SSalCrwPnlAct_4 :	BOOL;(*Saloon crew panel active in car M1L - internal*)
	PAD_SSalCrwPnlAct_3 :	BOOL;(*Saloon crew panel active in car DM2- internal*)
	PAD_SCrwPnlAct_1 :	BOOL;(*Crew PAnel cab 1*)
	PAD_SCrwPnlAct_3 :	BOOL;(*Cre Panel cab 2*)
	PAD_SLocConfirmed :	BOOL;(*Family : Location Confirmed*)
	PAD_XTotDistTrp :	UDINT;(*Total ditance from trip*)
	PAD_SColdMvmnt :	BOOL;(*Cold movement detected*)
	PAD_CSideLft :	BOOL;(*Command to close doors left*)
	PAD_CSideRgt :	BOOL;(*Command to close doors right*)
	PAD_SPibsIsolated :	BOOL;(*Family : PIBS is isolated*)
	PAD_REndAsdoSafeTest :	USINT;(*ASDO Safe Test end Status*)
	PAD_SAsdoOvrdAvl :	BOOL;(*ASDO override available (The Automatic Selective Door Operation (ASDO) System has detected that data is missing.)*)
	PAD_RAsdoSafeTest :	USINT;(*ADSO Safe test request (ASDO safe test request is TRUE when this is equal to 23)*)
	PAD_RAsdoEnRedAF_1 :	BOOL;(*ASDO Enable Request Red car 1 doors A and F*)
	PAD_RAsdoEnRedAF_3 :	BOOL;(*ASDO Enable Request Red car 3 doors A and F*)
	PAD_RAsdoEnSafeAF_1 :	BOOL;(*ASDO Enable Request Safe car 1 doors A and F*)
	PAD_RAsdoEnSafeAF_3 :	BOOL;(*ASDO Enable Request Safe car 3 doors A and F*)
	PAD_RAsdoEnRedSafeAF_1 :	BOOL;(*ASDO Enable Request Red Safe car 1 doors A and F*)
	PAD_RAsdoEnRedSafeAF_3 :	BOOL;(*ASDO Enable Request Red Safe car 3 doors A and F*)
	PAD_RAsdoEnAF_1 :	BOOL;(*ASDO Enable Request car 1 doors A and F*)
	PAD_RAsdoEnAF_3 :	BOOL;(*ASDO Enable Request car 3 doors A and F*)
	PAD_DcuEnHwFbA_1 :	BOOL;(*ASDO Enable HW Feedback car 1 door A*)
	PAD_DcuEnHwFbF_1 :	BOOL;(*ASDO Enable HW Feedback car 1 door F*)
	PAD_DcuEnHwFbA_3 :	BOOL;(*ASDO Enable HW Feedback car 3 door A*)
	PAD_DcuEnHwFbF_3 :	BOOL;(*ASDO Enable HW Feedback car 3 door F*)
	PAD_XOwnCst :	USINT;(*Own consist Entry*)
	PAD_SDrgDetNotAct1 :	BOOL;(*Drag detection not active in cab 1*)
	PAD_SDrgDetNotAct2 :	BOOL;(*Drag detection not active in cab 2*)
	PAD_SSnstvEdgDeact_1 :	BOOL;(*Drag Detection Feedback is active on Cab 1 (Sensitive edge deactivated)*)
	PAD_SSnstvEdgDeact_2 :	BOOL;(*Drag Detection Feedback is active on Cab 2 (Sensitive edge deactivated)*)
	PAD_SEmBrRly_1 :	BOOL;(*Release EB Signal 1 (Emergency brake relay energised)*)
	PAD_SEmBrRly_2 :	BOOL;(*Release EB Signal 2 (Emergency brake relay energised)*)
	PAD_SMissDoor :	BOOL;(*STATUS: TCMS has detected that not all expected doors have been determined within the train*)
	PAD_SDuplDoor :	BOOL;(*STATUS: TCMS has detected a mismatch between the doors in different Consists (two consist have calculated that they have the same doors).*)
	PAD_XNextStnID :	UDINT;(*INTERNAL: Next station ID*)
	PAD_ZNxtStnRelPttrn1 :	UDINT;(*INTERNAL: Next Station Release Pattern most significant bits*)
	PAD_SSalCrwDrClPbRgt_1 :	BOOL;(*Saloon crew close all right doors pushbutton active car DM1 internal*)
	PAD_SSalCrwDrClPbLft_1 :	BOOL;(*Saloon crew close all left doors pushbutton active car DM1- internal*)
	PAD_SSalCrwDrClPbRgt_2 :	BOOL;(*Saloon crew close all right doors pushbutton active car DM2- internal*)
	PAD_SSalCrwDrClPbLft_2 :	BOOL;(*Saloon crew close all left doors pushbutton active car DM2- internal*)
	PAD_SSalCrwDrClPbRgt_3 :	BOOL;(*Saloon crew close all right doors pushbutton active car PMLW- internal*)
	PAD_SSalCrwDrClPbLft_3 :	BOOL;(*Saloon crew close all left doors pushbutton active car PMLW- internal*)
	PAD_SSalCrwDrClPbRgt_4 :	BOOL;(*Saloon crew close all right doors pushbutton active car M1L- internal*)
	PAD_SSalCrwDrClPbLft_4 :	BOOL;(*Saloon crew close all left doors pushbutton active car M1L- internal*)
	PAD_SSalCrwDrClPbRgt_5 :	BOOL;(*Saloon crew close all right doors pushbutton active car M2L- internal*)
	PAD_SSalCrwDrClPbLft_5 :	BOOL;(*Saloon crew close all left doors pushbutton active car M2L- internal*)
	PAD_ZNxtStnRelPttrn2 :	UDINT;(*INTERNAL: Next Station Release Pattern least significant bits*)
END_VAR


(*Group:Local*)


VAR
	Enable :	BOOL := TRUE;(*Enable worksheet code execution*)
	EnSigNeedToBeSkip :	BOOL := TRUE;
	ConsistBitPattern :	WORD;(*Number of Consist. Bit 1 set = 1 consist, 2= second consist*)
END_VAR


VAR_OUTPUT
	Is4CarInMyConsist :	BOOL := 0;(*0 = 5 cars unit  1 = 4 cars unit*)
END_VAR


VAR
	CarBitMaske :	INT := 0;(*bit mask to determine how many cars exits in consist*)
	PAD_CabActiveV :	BOOL;(*Validity for the active cab*)
	SdoValid :	BOOL;(*SDO validity*)
END_VAR


(*@KEY@: WORKSHEET
NAME: FromOtherFA
IEC_LANGUAGE: ST
*)
IF NOT Enable_FA
THEN
	RETURN;
END_IF;
	
	
	TC_CabActive.SCstCab1Act		:= TCC_SCabAct_1;
	TC_CabActive.SCstCab2Act		:= TCC_SCabAct_3;
	TC_CabActive.SCstCabAct			:= TCC_SMaster;
	TC_CabActive.STrnCabAct        	:= TCC_T_SCabAct;
	PAD_CCrewSwitchAct				:= TCC_T_SCabAct;
	TC_MyConsist.SOrientCstInvers  	:= TCC_SOrientInverse; 
	TC_MyConsist.SOrientCstSame	    := TCC_SOrientSame;
	TC_MyConsist.SOrientV			:= TCC_SOrientV;
	SCTR_SysInit.SSysInitDone		:= C_SSysInitDone; 
	PAD_GrdOnlyMd					:= TCM_GrdOnlyMd;
	(* FRS-527: Crew switch activate / deactive *)
	TC_CabActive.STrnCabAct := PAD_CCrewSwitchAct;
	
	TC_TrainConfig.SNumOfCarTrn    := TCC_SCarNrTrnCfg;

	(* Not in FromCCUS sheet because PAD_CabActiveV is needed here and FromCCUS is only executed after *)
	PAD_CabActiveV := NOT(CI_CCUS_SXCabStTrn = USINT#0);
	
	TC_CabActive.ZCstCabActState := BTAL_PackWord(TCC_SCabAct_1,
													TCC_SCabAct_3,
													FALSE,
													FALSE,
													PAD_CabActiveV,
													PAD_CabActiveV,
													FALSE,
													FALSE,
													FALSE,
													FALSE,
													FALSE,
													FALSE,
													FALSE,
													FALSE,
													FALSE,
													FALSE);
	ConsistBitPattern := BTAL_PackWord(TCC_XNumCst >= INT#1,
									TCC_XNumCst >= INT#2,
									TCC_XNumCst >= INT#3,
									TCC_XNumCst >= INT#4,
									TCC_XNumCst >= INT#5,
									FALSE,
									FALSE,
									FALSE,
									FALSE,
									FALSE,
									FALSE,
									FALSE,
									FALSE,
									FALSE,
									FALSE,
									FALSE);
	
	TC_MyConsist.SNumOfCst           := UINT_TO_USINT(WORD_TO_UINT(ConsistBitPattern));
	TC_TrainConfig.SNodeExists01:= ConsistBitPattern;
	
	PIS_STrnAtStn := (CI_CCUC_SPosOnSegment = USINT#1);
	
	PAD_CarIn01.PXNoOfObstAttmpt  := PAD_PXNoOfObstAttmpt;
	PAD_CarIn01.PXReOpDist        := PAD_PXReOpDist;
	PAD_CarIn02.PXNoOfObstAttmpt  := PAD_PXNoOfObstAttmpt;
	PAD_CarIn02.PXReOpDist        := PAD_PXReOpDist;
	PAD_CarIn03.PXNoOfObstAttmpt  := PAD_PXNoOfObstAttmpt;
	PAD_CarIn03.PXReOpDist        := PAD_PXReOpDist;
	PAD_CarIn04.PXNoOfObstAttmpt  := PAD_PXNoOfObstAttmpt;
	PAD_CarIn04.PXReOpDist        := PAD_PXReOpDist;
	PAD_CarIn05.PXNoOfObstAttmpt  := PAD_PXNoOfObstAttmpt;
	PAD_CarIn05.PXReOpDist        := PAD_PXReOpDist;
	
	PAD_CarIn01.PAutClTm := PAD_PAutClTm;
	PAD_CarIn02.PAutClTm := PAD_PAutClTm;
	PAD_CarIn03.PAutClTm := PAD_PAutClTm;
	PAD_CarIn04.PAutClTm := PAD_PAutClTm;
	PAD_CarIn05.PAutClTm := PAD_PAutClTm;
	
	PAD_CarIn01.PZDisIntClPb := USINT_TO_BYTE(PAD_PZDisIntClPbCar1);
	PAD_CarIn02.PZDisIntClPb := USINT_TO_BYTE(PAD_PZDisIntClPbCar2);
	PAD_CarIn03.PZDisIntClPb := USINT_TO_BYTE(PAD_PZDisIntClPbCar3);
	PAD_CarIn04.PZDisIntClPb := USINT_TO_BYTE(PAD_PZDisIntClPbCar4);
	PAD_CarIn05.PZDisIntClPb := USINT_TO_BYTE(PAD_PZDisIntClPbCar5);
	
	PAD_CSideLft := DIACD_CSideLft;
	PAD_CSideRgt := DIACD_CSideRgt;
	
	AC_STrnFireDtc := FM_STrnFireDtc;
	
	(*Number of cars in each consist in train
	Bit0=1 : 4 cars in consist 1, Bit1=1: 5 cars in consist 1
	Bit2=1 : 4 cars in consist 2, Bit3=1: 5 cars in consist 2
	Bit4=1 : 4 cars in consist 3, Bit5=1: 5 cars in consist 3
	Bit6=1 : 4 cars in consist 4, Bit7=1: 5 cars in consist 4
	*)
	
	(* CarBitMaske := (TCCO_XCstNr -1) * 2;*)
	
	(* Signal shall be only set in SWR *)
	PAD_PGrdPnlUsd := FALSE;
	(* Signal shall be only set in LOT *)
	PAD_PCabCpldNeeded := FALSE;

	(* Parameter to allow PK44 side selection and CSDE clear in SWR. For SWR value - 251, For other projects Value- 63*)
	PAD_PPk44SideSelProj := BYTE#63;
	
	CarBitMaske := WORD_TO_INT(SHL(WORD#1, (TCC_XCstNr - 1) * 2));
	
	Is4CarInMyConsist := (WORD#0 <> (INT_TO_WORD(TCC_XCarNrTrnCfg) AND INT_TO_WORD(CarBitMaske)));
	
	IF Is4CarInMyConsist
THEN
	PAD_PCarExists :=WORD#16#17;
ELSE
	PAD_PCarExists :=WORD#16#1F;
END_IF;
(*@KEY@: END_WORKSHEET *)
(*@KEY@: WORKSHEET
NAME: FromPAD_Internal
IEC_LANGUAGE: ST
*)
IF Enable
    THEN
    (* Routing the signal from projectspecific to family component *)
	PAD_Dcu_ZOp_01 := CO_DCU1_ZOp; 
	PAD_Dcu_ZOp_02 := CO_DCU2_ZOp;
	PAD_Dcu_ZOp_03 := CO_DCU3_ZOp;
	PAD_Dcu_ZOp_04 := CO_DCU4_ZOp;
	PAD_Dcu_ZOp_05 := CO_DCU5_ZOp;
	PAD_Dcu_ZCl_01 := CO_DCU1_ZCl;
	PAD_Dcu_ZCl_02 := CO_DCU2_ZCl;
	PAD_Dcu_ZCl_03 := CO_DCU3_ZCl;
	PAD_Dcu_ZCl_04 := CO_DCU4_ZCl;
	PAD_Dcu_ZCl_05 := CO_DCU5_ZCl;

END_IF;
(*@KEY@: END_WORKSHEET *)
(*@KEY@: WORKSHEET
NAME: FromCCUS
IEC_LANGUAGE: ST
*)

IF Enable
    THEN

SdoValid := (CI_CCUS_SAsdoIslV = UINT#32768);

	(* CCU-S interface not defined yet. update and ensure car numbering schemes are consistent between East Anglia and Gen parts *)
	 	PAD_CmdFromBus.CDiRlsDrs_1 := BTAL_PackWord( NOT(SdoValid) OR NOT(CI_CCUS_SCar1DrSdoEnAF),
													 NOT(SdoValid) OR NOT(CI_CCUS_SCar1DrSdoEnAF),
													 TRUE,
													 TRUE,
													 NOT(SdoValid) OR NOT(CI_CCUS_SCar1DrSdoEnCD),
													 NOT(SdoValid) OR NOT(CI_CCUS_SCar1DrSdoEnCD),
													 NOT(SdoValid) OR NOT(CI_CCUS_SCar2DrSdoEnCD),
													 NOT(SdoValid) OR NOT(CI_CCUS_SCar2DrSdoEnCD),
													 TRUE,
													 TRUE,
													 NOT(SdoValid) OR NOT(CI_CCUS_SCar2DrSdoEnAF),
													 NOT(SdoValid) OR NOT(CI_CCUS_SCar2DrSdoEnAF),
													 NOT(SdoValid) OR NOT(CI_CCUS_SCar4DrSdoEnCD),
													 NOT(SdoValid) OR NOT(CI_CCUS_SCar4DrSdoEnCD),
													 TRUE,
													 TRUE
													 );

		PAD_CmdFromBus.CDiRlsDrs_2 := BTAL_PackWord( NOT(SdoValid) OR NOT(CI_CCUS_SCar4DrSdoEnAF),
													 NOT(SdoValid) OR NOT(CI_CCUS_SCar4DrSdoEnAF),
													 NOT(SdoValid) OR NOT(CI_CCUS_SCar5DrSdoEnCD),
													 NOT(SdoValid) OR NOT(CI_CCUS_SCar5DrSdoEnCD),
													 TRUE,
													 TRUE,
													 NOT(SdoValid) OR NOT(CI_CCUS_SCar5DrSdoEnAF),
													 NOT(SdoValid) OR NOT(CI_CCUS_SCar5DrSdoEnAF),
													 NOT(SdoValid) OR NOT(CI_CCUS_SCar3DrSdoEnCD),
													 NOT(SdoValid) OR NOT(CI_CCUS_SCar3DrSdoEnCD),
													 TRUE,
													 TRUE,
													 NOT(SdoValid) OR NOT(CI_CCUS_SCar3DrSdoEnAF),
													 NOT(SdoValid) OR NOT(CI_CCUS_SCar3DrSdoEnAF),
													 TRUE,
													 TRUE);

		PAD_CmdFromBus.CDiRlsDrs_3 := WORD#0;


		PAD_CarIn01.Door1.SSdoEnabled := CI_CCUS_SCar1DrSdoEnAF AND SdoValid;
		PAD_CarIn01.Door2.SSdoEnabled := CI_CCUS_SCar1DrSdoEnAF AND SdoValid; 
		PAD_CarIn01.Door3.SSdoEnabled := FALSE;
		PAD_CarIn01.Door4.SSdoEnabled := FALSE;
		PAD_CarIn01.Door5.SSdoEnabled := CI_CCUS_SCar1DrSdoEnCD AND SdoValid;
		PAD_CarIn01.Door6.SSdoEnabled := CI_CCUS_SCar1DrSdoEnCD AND SdoValid;

		PAD_CarIn02.Door1.SSdoEnabled := CI_CCUS_SCar2DrSdoEnCD AND SdoValid;
		PAD_CarIn02.Door2.SSdoEnabled := CI_CCUS_SCar2DrSdoEnCD AND SdoValid;
		PAD_CarIn02.Door3.SSdoEnabled := FALSE;
		PAD_CarIn02.Door4.SSdoEnabled := FALSE;
		PAD_CarIn02.Door5.SSdoEnabled := CI_CCUS_SCar2DrSdoEnAF AND SdoValid;
		PAD_CarIn02.Door6.SSdoEnabled := CI_CCUS_SCar2DrSdoEnAF AND SdoValid;

		PAD_CarIn03.Door1.SSdoEnabled := CI_CCUS_SCar4DrSdoEnCD AND SdoValid;
		PAD_CarIn03.Door2.SSdoEnabled := CI_CCUS_SCar4DrSdoEnCD AND SdoValid;
		PAD_CarIn03.Door3.SSdoEnabled := FALSE;
		PAD_CarIn03.Door4.SSdoEnabled := FALSE;
		PAD_CarIn03.Door5.SSdoEnabled := CI_CCUS_SCar4DrSdoEnAF AND SdoValid;
		PAD_CarIn03.Door6.SSdoEnabled := CI_CCUS_SCar4DrSdoEnAF AND SdoValid;

		PAD_CarIn04.Door1.SSdoEnabled := CI_CCUS_SCar5DrSdoEnCD AND SdoValid;
		PAD_CarIn04.Door2.SSdoEnabled := CI_CCUS_SCar5DrSdoEnCD AND SdoValid;
		PAD_CarIn04.Door3.SSdoEnabled := FALSE;
		PAD_CarIn04.Door4.SSdoEnabled := FALSE;
		PAD_CarIn04.Door5.SSdoEnabled := CI_CCUS_SCar5DrSdoEnAF AND SdoValid;
		PAD_CarIn04.Door6.SSdoEnabled := CI_CCUS_SCar5DrSdoEnAF AND SdoValid;

		PAD_CarIn05.Door1.SSdoEnabled := CI_CCUS_SCar3DrSdoEnCD AND SdoValid;
		PAD_CarIn05.Door2.SSdoEnabled := CI_CCUS_SCar3DrSdoEnCD AND SdoValid;
		PAD_CarIn05.Door3.SSdoEnabled := FALSE;
		PAD_CarIn05.Door4.SSdoEnabled := FALSE;
		PAD_CarIn05.Door5.SSdoEnabled := CI_CCUS_SCar3DrSdoEnAF AND SdoValid;
		PAD_CarIn05.Door6.SSdoEnabled := CI_CCUS_SCar3DrSdoEnAF AND SdoValid;


		PAD_SdoByPass := CI_CCUS_SSdoByp;
		PAD_SdoByPassV := SdoValid;

		PAD_XTotDistTrp := CI_CCUS_XTotDistTrp;

		PAD_CsdeData.SPtfmLft := CI_CCUS_SCsdePtfmLft;
		PAD_CsdeData.SPtfmRgt := CI_CCUS_SCsdePtfmRgt;
		PAD_CsdeData.STagExpected := CI_CCUS_SCsdeTagExpected;
		PAD_CsdeData.STagRead := CI_CCUS_SCsdeTagRead;
		PAD_CsdeData.SCsdeV := CI_CCUS_SCsdeV AND (NOT (PAD_SPibsIsolated));
		PAD_CsdeData.SPIBSFlt := CI_CCUS_SPIBSFlt;
		PAD_SLocConfirmed := CI_CCUS_SLocConfirmed;
		PAD_SPibsIsolated := CI_CCUS_SPibsIsl;
		PAD_SAsdoOvrdAvl := CI_CCUS_SAsdoOvrdAvl;

        DCM_CstState.SStandStill       := CI_CCUS_SSwLoSpd;
        (* if CCU-S can not get valid speed (from BGW) the ref. speed will be set to 65535.
         So, unless ref speed value is equal to 65535 it is a valid value. 
         Then they calculate "low speed" based on parameters and compare with the reference speed, so with a "invalid ref. speed" of 65535, the low 
         speed status will not be set. Therefore, valid status is includded in the Low speed status signal. *)
        DCM_CstState.SStandStillV      := TRUE;

		PAD_RAsdoSafeTest := CI_CCUS_SSASDOSafeTestSt;
		PAD_REndAsdoSafeTest := CI_CCUS_SSASDOSafeTestResultSt;
		PAD_RAsdoEnRedAF_1 := CI_CCUS_SCar1DrSdoEnAFRed;
		PAD_RAsdoEnRedAF_3 := CI_CCUS_SCar3DrSdoEnAFRed;
		PAD_RAsdoEnSafeAF_1 := CI_CCUS_SCar1DrSdoEnAFSaf;
		PAD_RAsdoEnSafeAF_3 := CI_CCUS_SCar3DrSdoEnAFSaf;
		PAD_RAsdoEnRedSafeAF_1 := CI_CCUS_SCar1DrSdoEnAFRedSaf;
		PAD_RAsdoEnRedSafeAF_3 := CI_CCUS_SCar3DrSdoEnAFRedSaf;
		PAD_RasdoEnAF_1 := CI_CCUS_SCar1DrSdoEnAF;
		PAD_RasdoEnAF_3	:= CI_CCUS_SCar3DrSdoEnAF;

		PAD_XOwnCst := CI_CCUS_XOwnCst;

		PAD_SDrgDetNotAct1 := CI_CCUS_SDrgDetNotAct1;
		PAD_SDrgDetNotAct2 := CI_CCUS_SDrgDetNotAct2;

		(*2F03.CON-1134 and 2F03.CON-1135*)
		PAD_SMissDoor := CI_CCUS_EMissDoor;
		PAD_SDuplDoor := CI_CCUS_EDuplDoor;

		(*2F03.CON-481 and 2F03.CON-482 sending the next station Release Pattern to PIS*)
		PAD_ZNxtStnRelPttrn1 := CI_CCUS_ZNxtStnRelPttrn1;
		PAD_ZNxtStnRelPttrn2 := CI_CCUS_ZNxtStnRelPttrn2;

		(*PK44 Signals from CCUS*)
		PAD_SPk44Conflict := FALSE; (*CI_CCUS_SPk44Conflict;*)
		PAD_SPk44PltfrmLft:= FALSE; (*CI_CCUS_SPk44PltfrmLft;*)
		PAD_SPk44PltfrmRgt:= FALSE; (*CI_CCUS_SPk44PltfrmRgt;*)
		PAD_SPk44DataRcvd := FALSE; (*CI_CCUS_SPk44DataRcvd;*)
		PAD_SPk44DataStrd := FALSE; (*CI_CCUS_SPk44DataStrd;*)
		PAD_SPk44Expected := FALSE; (*CI_CCUS_SPk44Expected;*)


END_IF;
(*@KEY@: END_WORKSHEET *)
(*@KEY@: WORKSHEET
NAME: FromGW
IEC_LANGUAGE: ST
*)
IF Enable
    THEN
    (* From BUS Consist 1 *)
    PAD_StatusFromBus_01.SSwDrsClsLck      := CI_L1_SDrsClsLck ;
    PAD_StatusFromBus_01.SSwDrsClsLckV     := C_VCCUOL1;
    PAD_StatusFromBus_01.SDrsClsdLckdLft   := CI_L1_SDrsClsdLft ;
    PAD_StatusFromBus_01.SDrsClsdLckdLftV  := C_VCCUOL1;
    PAD_StatusFromBus_01.SDrsClsdLckdRgt   := CI_L1_SDrsClsdRgt ;
    PAD_StatusFromBus_01.SDrsClsdLckdRgtV  := C_VCCUOL1;
	PAD_StatusFromBus_01.SCabDrsClsdLckLft1 := CI_L1_SCabDrsClsdLft1 ;
	PAD_StatusFromBus_01.SCabDrsClsdLckLft1V := C_VCCUOL1;
	PAD_StatusFromBus_01.SCabDrsClsdLckRgt1 := CI_L1_SCabDrsClsdRgt1 ;
	PAD_StatusFromBus_01.SCabDrsClsdLckRgt1V := C_VCCUOL1;
	PAD_StatusFromBus_01.SCabDrsClsdLckLft2 := CI_L1_SCabDrsClsdLft2 ;
	PAD_StatusFromBus_01.SCabDrsClsdLckLft2V := C_VCCUOL1;
	PAD_StatusFromBus_01.SCabDrsClsdLckRgt2 := CI_L1_SCabDrsClsdRgt2 ;
	PAD_StatusFromBus_01.SCabDrsClsdLckRgt2V := C_VCCUOL1;
    PAD_StatusFromBus_01.SObstclDetCls     := CI_L1_SDrsObstclDetCls ;
    PAD_StatusFromBus_01.SObstclDetClsV    := C_VCCUOL1;
	PAD_StatusFromBus_01.SCabSalDrCl1      := CI_L1_SCabSalDrCls1;
	PAD_StatusFromBus_01.SCabSalDrCl1V     := C_VCCUOL1;
	PAD_StatusFromBus_01.SCabSalDrCl2      := CI_L1_SCabSalDrCls2;
	PAD_StatusFromBus_01.SCabSalDrCl2V     := C_VCCUOL1;
    PAD_StatusFromBus_01.SClDrsLft         := CI_L1_SClsDrsLft ;
    PAD_StatusFromBus_01.SClDrsLftV        := C_VCCUOL1;
    PAD_StatusFromBus_01.SClDrsRgt         := CI_L1_SClsDrsRgt ;
    PAD_StatusFromBus_01.SClDrsRgtV        := C_VCCUOL1;
    PAD_StatusFromBus_01.IDiStp            := CI_L1_SDiStp ;
    PAD_StatusFromBus_01.IDiStpV           := C_VCCUOL1;
    PAD_StatusFromBus_01.SDrsRlsdLft       := CI_L1_SDrsRlsdLft ;
    PAD_StatusFromBus_01.SDrsRlsdLftV      := C_VCCUOL1;
    PAD_StatusFromBus_01.SDrsRlsdRgt       := CI_L1_SDrsRlsdRgt ;
    PAD_StatusFromBus_01.SDrsRlsdRgtV      := C_VCCUOL1;
    PAD_StatusFromBus_01.IEmAcsAct         := CI_L1_SEmAcsAct ;
    PAD_StatusFromBus_01.IEmAcsActV        := C_VCCUOL1;
    PAD_StatusFromBus_01.IEmEgrAct         := CI_L1_SEmEgrAct ;
    PAD_StatusFromBus_01.IEmEgrActV        := C_VCCUOL1;
    PAD_StatusFromBus_01.IServKeyAct       := CI_L1_SServKeyAct ;
    PAD_StatusFromBus_01.IServKeyActV      := C_VCCUOL1;
    PAD_StatusFromBus_01.SDrsOpndLft       := CI_L1_SDrsOpndLft;
    PAD_StatusFromBus_01.SDrsOpndLftV      := C_VCCUOL1;
    PAD_StatusFromBus_01.SDrsOpndRgt       := CI_L1_SDrsOpndRgt; 
    PAD_StatusFromBus_01.SDrsOpndRgtV      := C_VCCUOL1;
	PAD_StatusFromBus_01.SHwDrLpActCab1    := CI_L1_SHwDrsClsLckCab1; 
    PAD_StatusFromBus_01.SHwDrLpActCab1V   := C_VCCUOL1;
	PAD_StatusFromBus_01.SHwDrLpActCab2    := CI_L1_SHwDrsClsLckCab2; 
    PAD_StatusFromBus_01.SHwDrLpActCab2V   := C_VCCUOL1;
	PAD_StatusFromBus_01.SCndtMdLft		   := CI_L1_SCndtMdLft; 
	PAD_StatusFromBus_01.SCndtMdLftV       := C_VCCUOL1;
	PAD_StatusFromBus_01.SCndtMdRgt		   := CI_L1_SCndtMdRgt; 
	PAD_StatusFromBus_01.SCndtMdRgtV       := C_VCCUOL1;
	PAD_StatusFromBus_01.SDrgDtcdLft	   := CI_L1_SDrgDtcdLft; 
	PAD_StatusFromBus_01.SDrgDtcdLftV	   := C_VCCUOL1;
	PAD_StatusFromBus_01.SDrgDtcdRgt	   := CI_L1_SDrgDtcdRgt; 
	PAD_StatusFromBus_01.SDrgDtcdRgtV	   := C_VCCUOL1;


	PAD_SGrdPnlAct_01_1 				   := CI_L1_SGrdPnlAct_1 AND C_VCCUOL1;
	PAD_SGrdPnlAct_01_2 				   := CI_L1_SGrdPnlAct_2 AND C_VCCUOL1;
	PAD_SGrdPnlAct_01_3 				   := CI_L1_SGrdPnlAct_3 AND C_VCCUOL1;
	PAD_SGrdPnlAct_01_4 				   := CI_L1_SGrdPnlAct_4 AND C_VCCUOL1;
	PAD_SGrdPnlAct_01_5 				   := CI_L1_SGrdPnlAct_5 AND C_VCCUOL1;
	PAD_SCrwPnlAct_01_1                    := CI_L1_SCrwPnlAct_1 AND C_VCCUOL1;
    PAD_SCrwPnlAct_01_3                    := CI_L1_SCrwPnlAct_3 AND C_VCCUOL1;




    (* From BUS Consist 2 *)
    PAD_StatusFromBus_02.SSwDrsClsLck      := CI_L2_SDrsClsLck ;
    PAD_StatusFromBus_02.SSwDrsClsLckV     := C_VCCUOL2;
    PAD_StatusFromBus_02.SDrsClsdLckdLft   := CI_L2_SDrsClsdLft ;
    PAD_StatusFromBus_02.SDrsClsdLckdLftV  := C_VCCUOL2;
    PAD_StatusFromBus_02.SDrsClsdLckdRgt   := CI_L2_SDrsClsdRgt ;
    PAD_StatusFromBus_02.SDrsClsdLckdRgtV  := C_VCCUOL2;
	PAD_StatusFromBus_02.SCabDrsClsdLckLft1 := CI_L2_SCabDrsClsdLft1 ;
	PAD_StatusFromBus_02.SCabDrsClsdLckLft1V := C_VCCUOL2;
	PAD_StatusFromBus_02.SCabDrsClsdLckRgt1 := CI_L2_SCabDrsClsdRgt1 ;
	PAD_StatusFromBus_02.SCabDrsClsdLckRgt1V := C_VCCUOL2;
	PAD_StatusFromBus_02.SCabDrsClsdLckLft2 := CI_L2_SCabDrsClsdLft2 ;
	PAD_StatusFromBus_02.SCabDrsClsdLckLft2V := C_VCCUOL2;
	PAD_StatusFromBus_02.SCabDrsClsdLckRgt2 := CI_L2_SCabDrsClsdRgt2 ;
	PAD_StatusFromBus_02.SCabDrsClsdLckRgt2V := C_VCCUOL2;
    PAD_StatusFromBus_02.SObstclDetCls     := CI_L2_SDrsObstclDetCls ;
    PAD_StatusFromBus_02.SObstclDetClsV    := C_VCCUOL2;
	PAD_StatusFromBus_02.SCabSalDrCl1      := CI_L2_SCabSalDrCls1;
	PAD_StatusFromBus_02.SCabSalDrCl1V     := C_VCCUOL2;
	PAD_StatusFromBus_02.SCabSalDrCl2      := CI_L2_SCabSalDrCls2;
	PAD_StatusFromBus_02.SCabSalDrCl2V     := C_VCCUOL2;
    PAD_StatusFromBus_02.SClDrsLft         := CI_L2_SClsDrsLft ;
    PAD_StatusFromBus_02.SClDrsLftV        := C_VCCUOL2;
    PAD_StatusFromBus_02.SClDrsRgt         := CI_L2_SClsDrsRgt ;
    PAD_StatusFromBus_02.SClDrsRgtV        := C_VCCUOL2;
    PAD_StatusFromBus_02.IDiStp            := CI_L2_SDiStp ;
    PAD_StatusFromBus_02.IDiStpV           := C_VCCUOL2;
    PAD_StatusFromBus_02.SDrsRlsdLft       := CI_L2_SDrsRlsdLft ;
    PAD_StatusFromBus_02.SDrsRlsdLftV      := C_VCCUOL2;
    PAD_StatusFromBus_02.SDrsRlsdRgt       := CI_L2_SDrsRlsdRgt ;
    PAD_StatusFromBus_02.SDrsRlsdRgtV      := C_VCCUOL2;
    PAD_StatusFromBus_02.IEmAcsAct         := CI_L2_SEmAcsAct ;
    PAD_StatusFromBus_02.IEmAcsActV        := C_VCCUOL2;
    PAD_StatusFromBus_02.IEmEgrAct         := CI_L2_SEmEgrAct ;
    PAD_StatusFromBus_02.IEmEgrActV        := C_VCCUOL2;
    PAD_StatusFromBus_02.IServKeyAct       := CI_L2_SServKeyAct ;
    PAD_StatusFromBus_02.IServKeyActV      := C_VCCUOL2;
    PAD_StatusFromBus_02.SDrsOpndLft       := CI_L2_SDrsOpndLft;
    PAD_StatusFromBus_02.SDrsOpndLftV      := C_VCCUOL2;
    PAD_StatusFromBus_02.SDrsOpndRgt       := CI_L2_SDrsOpndRgt; 
    PAD_StatusFromBus_02.SDrsOpndRgtV      := C_VCCUOL2;
    PAD_StatusFromBus_02.SHwDrLpActCab1    := CI_L2_SHwDrsClsLckCab1; 
    PAD_StatusFromBus_02.SHwDrLpActCab1V   := C_VCCUOL2;
	PAD_StatusFromBus_02.SHwDrLpActCab2    := CI_L2_SHwDrsClsLckCab2; 
    PAD_StatusFromBus_02.SHwDrLpActCab2V   := C_VCCUOL2;
	PAD_StatusFromBus_02.SCndtMdLft		   := CI_L2_SCndtMdLft; 
	PAD_StatusFromBus_02.SCndtMdLftV       := C_VCCUOL2;
	PAD_StatusFromBus_02.SCndtMdRgt		   := CI_L2_SCndtMdRgt; 
	PAD_StatusFromBus_02.SCndtMdRgtV       := C_VCCUOL2;
	PAD_StatusFromBus_02.SDrgDtcdLft	   := CI_L2_SDrgDtcdLft; 
	PAD_StatusFromBus_02.SDrgDtcdLftV	   := C_VCCUOL1;
	PAD_StatusFromBus_02.SDrgDtcdRgt	   := CI_L2_SDrgDtcdRgt; 
	PAD_StatusFromBus_02.SDrgDtcdRgtV	   := C_VCCUOL1;


	PAD_SGrdPnlAct_02_1 				   := CI_L2_SGrdPnlAct_1 AND C_VCCUOL2;
	PAD_SGrdPnlAct_02_2 				   := CI_L2_SGrdPnlAct_2 AND C_VCCUOL2;
	PAD_SGrdPnlAct_02_3 				   := CI_L2_SGrdPnlAct_3 AND C_VCCUOL2;
	PAD_SGrdPnlAct_02_4 				   := CI_L2_SGrdPnlAct_4 AND C_VCCUOL2;
	PAD_SGrdPnlAct_02_5 				   := CI_L2_SGrdPnlAct_5 AND C_VCCUOL2;
	PAD_SCrwPnlAct_02_1                    := CI_L2_SCrwPnlAct_1 AND C_VCCUOL2;
    PAD_SCrwPnlAct_02_3                    := CI_L2_SCrwPnlAct_3 AND C_VCCUOL2;
    
	(* From BUS Consist 3 *)
    PAD_StatusFromBus_03.SSwDrsClsLck      := CI_L3_SDrsClsLck ;
    PAD_StatusFromBus_03.SSwDrsClsLckV     := C_VCCUOL3;
    PAD_StatusFromBus_03.SDrsClsdLckdLft   := CI_L3_SDrsClsdLft ;
    PAD_StatusFromBus_03.SDrsClsdLckdLftV  := C_VCCUOL3;
    PAD_StatusFromBus_03.SDrsClsdLckdRgt   := CI_L3_SDrsClsdRgt ;
    PAD_StatusFromBus_03.SDrsClsdLckdRgtV  := C_VCCUOL3;
	PAD_StatusFromBus_03.SCabDrsClsdLckLft1 := CI_L3_SCabDrsClsdLft1 ;
	PAD_StatusFromBus_03.SCabDrsClsdLckLft1V := C_VCCUOL3;
	PAD_StatusFromBus_03.SCabDrsClsdLckRgt1 := CI_L3_SCabDrsClsdRgt1 ;
	PAD_StatusFromBus_03.SCabDrsClsdLckRgt1V := C_VCCUOL3;
	PAD_StatusFromBus_03.SCabDrsClsdLckLft2 := CI_L3_SCabDrsClsdLft2 ;
	PAD_StatusFromBus_03.SCabDrsClsdLckLft2V := C_VCCUOL3;
	PAD_StatusFromBus_03.SCabDrsClsdLckRgt2 := CI_L3_SCabDrsClsdRgt2 ;
	PAD_StatusFromBus_03.SCabDrsClsdLckRgt2V := C_VCCUOL3;
    PAD_StatusFromBus_03.SObstclDetCls     := CI_L3_SDrsObstclDetCls ;
    PAD_StatusFromBus_03.SObstclDetClsV    := C_VCCUOL3;
	PAD_StatusFromBus_03.SCabSalDrCl1      := CI_L3_SCabSalDrCls1;
	PAD_StatusFromBus_03.SCabSalDrCl1V     := C_VCCUOL3;
	PAD_StatusFromBus_03.SCabSalDrCl2      := CI_L3_SCabSalDrCls2;
	PAD_StatusFromBus_03.SCabSalDrCl2V     := C_VCCUOL3;
    PAD_StatusFromBus_03.SClDrsLft         := CI_L3_SClsDrsLft ;
    PAD_StatusFromBus_03.SClDrsLftV        := C_VCCUOL3;
    PAD_StatusFromBus_03.SClDrsRgt         := CI_L3_SClsDrsRgt ;
    PAD_StatusFromBus_03.SClDrsRgtV        := C_VCCUOL3;
    PAD_StatusFromBus_03.IDiStp            := CI_L3_SDiStp ;
    PAD_StatusFromBus_03.IDiStpV           := C_VCCUOL3;
    PAD_StatusFromBus_03.SDrsRlsdLft       := CI_L3_SDrsRlsdLft ;
    PAD_StatusFromBus_03.SDrsRlsdLftV      := C_VCCUOL3;
    PAD_StatusFromBus_03.SDrsRlsdRgt       := CI_L3_SDrsRlsdRgt ;
    PAD_StatusFromBus_03.SDrsRlsdRgtV      := C_VCCUOL3;
    PAD_StatusFromBus_03.IEmAcsAct         := CI_L3_SEmAcsAct ;
    PAD_StatusFromBus_03.IEmAcsActV        := C_VCCUOL3;
    PAD_StatusFromBus_03.IEmEgrAct         := CI_L3_SEmEgrAct ;
    PAD_StatusFromBus_03.IEmEgrActV        := C_VCCUOL3;
    PAD_StatusFromBus_03.IServKeyAct       := CI_L3_SServKeyAct ;
    PAD_StatusFromBus_03.IServKeyActV      := C_VCCUOL3;
    PAD_StatusFromBus_03.SDrsOpndLft       := CI_L3_SDrsOpndLft;
    PAD_StatusFromBus_03.SDrsOpndLftV      := C_VCCUOL3;
    PAD_StatusFromBus_03.SDrsOpndRgt       := CI_L3_SDrsOpndRgt; 
    PAD_StatusFromBus_03.SDrsOpndRgtV      := C_VCCUOL3;
    PAD_StatusFromBus_03.SHwDrLpActCab1    := CI_L3_SHwDrsClsLckCab1; 
    PAD_StatusFromBus_03.SHwDrLpActCab1V   := C_VCCUOL3;
	PAD_StatusFromBus_03.SHwDrLpActCab2    := CI_L3_SHwDrsClsLckCab2; 
    PAD_StatusFromBus_03.SHwDrLpActCab2V   := C_VCCUOL3;
	PAD_StatusFromBus_03.SCndtMdLft		   := CI_L3_SCndtMdLft; 
	PAD_StatusFromBus_03.SCndtMdLftV       := C_VCCUOL3;
	PAD_StatusFromBus_03.SCndtMdRgt		   := CI_L3_SCndtMdRgt; 
	PAD_StatusFromBus_03.SCndtMdRgtV       := C_VCCUOL3;
	PAD_StatusFromBus_03.SDrgDtcdLft	   := CI_L3_SDrgDtcdLft; 
	PAD_StatusFromBus_03.SDrgDtcdLftV	   := C_VCCUOL1;
	PAD_StatusFromBus_03.SDrgDtcdRgt	   := CI_L3_SDrgDtcdRgt; 
	PAD_StatusFromBus_03.SDrgDtcdRgtV	   := C_VCCUOL1;

	PAD_SGrdPnlAct_03_1 				   := CI_L3_SGrdPnlAct_1 AND C_VCCUOL3;
	PAD_SGrdPnlAct_03_2 				   := CI_L3_SGrdPnlAct_2 AND C_VCCUOL3;
	PAD_SGrdPnlAct_03_3 				   := CI_L3_SGrdPnlAct_3 AND C_VCCUOL3;
	PAD_SGrdPnlAct_03_4 				   := CI_L3_SGrdPnlAct_4 AND C_VCCUOL3;
	PAD_SGrdPnlAct_03_5 				   := CI_L3_SGrdPnlAct_5 AND C_VCCUOL3;
	PAD_SCrwPnlAct_03_1                    := CI_L3_SCrwPnlAct_1 AND C_VCCUOL3;
    PAD_SCrwPnlAct_03_3                    := CI_L3_SCrwPnlAct_3 AND C_VCCUOL3;


    (* From BUS Consist 4 *)
    PAD_StatusFromBus_04.SSwDrsClsLck      := CI_L4_SDrsClsLck ;
    PAD_StatusFromBus_04.SSwDrsClsLckV     := C_VCCUOL4;
    PAD_StatusFromBus_04.SDrsClsdLckdLft   := CI_L4_SDrsClsdLft ;
    PAD_StatusFromBus_04.SDrsClsdLckdLftV  := C_VCCUOL4;
    PAD_StatusFromBus_04.SDrsClsdLckdRgt   := CI_L4_SDrsClsdRgt ;
    PAD_StatusFromBus_04.SDrsClsdLckdRgtV  := C_VCCUOL4;
	PAD_StatusFromBus_04.SCabDrsClsdLckLft1 := CI_L4_SCabDrsClsdLft1 ;
	PAD_StatusFromBus_04.SCabDrsClsdLckLft1V := C_VCCUOL4;
	PAD_StatusFromBus_04.SCabDrsClsdLckRgt1 := CI_L4_SCabDrsClsdRgt1 ;
	PAD_StatusFromBus_04.SCabDrsClsdLckRgt1V := C_VCCUOL4;
	PAD_StatusFromBus_04.SCabDrsClsdLckLft2 := CI_L4_SCabDrsClsdLft2 ;
	PAD_StatusFromBus_04.SCabDrsClsdLckLft2V := C_VCCUOL4;
	PAD_StatusFromBus_04.SCabDrsClsdLckRgt2 := CI_L4_SCabDrsClsdRgt2 ;
	PAD_StatusFromBus_04.SCabDrsClsdLckRgt2V := C_VCCUOL4;
    PAD_StatusFromBus_04.SObstclDetCls     := CI_L4_SDrsObstclDetCls ;
    PAD_StatusFromBus_04.SObstclDetClsV    := C_VCCUOL4;
	PAD_StatusFromBus_04.SCabSalDrCl1      := CI_L4_SCabSalDrCls1;
	PAD_StatusFromBus_04.SCabSalDrCl1V     := C_VCCUOL4;
	PAD_StatusFromBus_04.SCabSalDrCl2      := CI_L4_SCabSalDrCls2;
	PAD_StatusFromBus_04.SCabSalDrCl2V     := C_VCCUOL4;
    PAD_StatusFromBus_04.SClDrsLft         := CI_L4_SClsDrsLft ;
    PAD_StatusFromBus_04.SClDrsLftV        := C_VCCUOL4;
    PAD_StatusFromBus_04.SClDrsRgt         := CI_L4_SClsDrsRgt ;
    PAD_StatusFromBus_04.SClDrsRgtV        := C_VCCUOL4;
    PAD_StatusFromBus_04.IDiStp            := CI_L4_SDiStp ;
    PAD_StatusFromBus_04.IDiStpV           := C_VCCUOL4;
    PAD_StatusFromBus_04.SDrsRlsdLft       := CI_L4_SDrsRlsdLft ;
    PAD_StatusFromBus_04.SDrsRlsdLftV      := C_VCCUOL4;
    PAD_StatusFromBus_04.SDrsRlsdRgt       := CI_L4_SDrsRlsdRgt ;
    PAD_StatusFromBus_04.SDrsRlsdRgtV      := C_VCCUOL4;
    PAD_StatusFromBus_04.IEmAcsAct         := CI_L4_SEmAcsAct ;
    PAD_StatusFromBus_04.IEmAcsActV        := C_VCCUOL4;
    PAD_StatusFromBus_04.IEmEgrAct         := CI_L4_SEmEgrAct ;
    PAD_StatusFromBus_04.IEmEgrActV        := C_VCCUOL4;
    PAD_StatusFromBus_04.IServKeyAct       := CI_L4_SServKeyAct ;
    PAD_StatusFromBus_04.IServKeyActV      := C_VCCUOL4;
    PAD_StatusFromBus_04.SDrsOpndLft       := CI_L4_SDrsOpndLft;
    PAD_StatusFromBus_04.SDrsOpndLftV      := C_VCCUOL4;
    PAD_StatusFromBus_04.SDrsOpndRgt       := CI_L4_SDrsOpndRgt; 
    PAD_StatusFromBus_04.SDrsOpndRgtV      := C_VCCUOL4;
	PAD_StatusFromBus_04.SHwDrLpActCab1    := CI_L4_SHwDrsClsLckCab1; 
    PAD_StatusFromBus_04.SHwDrLpActCab1V   := C_VCCUOL4;
	PAD_StatusFromBus_04.SHwDrLpActCab2    := CI_L4_SHwDrsClsLckCab2; 
    PAD_StatusFromBus_04.SHwDrLpActCab2V   := C_VCCUOL4;
	PAD_StatusFromBus_04.SCndtMdLft		   := CI_L4_SCndtMdLft; 
	PAD_StatusFromBus_04.SCndtMdLftV       := C_VCCUOL4;
	PAD_StatusFromBus_04.SCndtMdRgt		   := CI_L4_SCndtMdRgt; 
	PAD_StatusFromBus_04.SCndtMdRgtV       := C_VCCUOL4;
	PAD_StatusFromBus_04.SDrgDtcdLft	   := CI_L4_SDrgDtcdLft; 
	PAD_StatusFromBus_04.SDrgDtcdLftV	   := C_VCCUOL1;
	PAD_StatusFromBus_04.SDrgDtcdRgt	   := CI_L4_SDrgDtcdRgt; 
	PAD_StatusFromBus_04.SDrgDtcdRgtV	   := C_VCCUOL1;

	PAD_SGrdPnlAct_04_1 				   := CI_L4_SGrdPnlAct_1 AND C_VCCUOL4;
	PAD_SGrdPnlAct_04_2 				   := CI_L4_SGrdPnlAct_2 AND C_VCCUOL4;
	PAD_SGrdPnlAct_04_3 				   := CI_L4_SGrdPnlAct_3 AND C_VCCUOL4;
	PAD_SGrdPnlAct_04_4 				   := CI_L4_SGrdPnlAct_4 AND C_VCCUOL4;
	PAD_SGrdPnlAct_04_5 				   := CI_L4_SGrdPnlAct_5 AND C_VCCUOL4;
	PAD_SCrwPnlAct_04_1                    := CI_L4_SCrwPnlAct_1 AND C_VCCUOL4;
    PAD_SCrwPnlAct_04_3                    := CI_L4_SCrwPnlAct_3 AND C_VCCUOL4;



	   (* commands from GW  *)

	PAD_CmdFromBus.CClDrsLft                   := CI_ML_CClDrsLft; 
	PAD_CmdFromBus.CClDrsRgt                   := CI_ML_CClDrsRgt;
	PAD_CmdFromBus.CClDrsLftV                  := C_VCCUOM; 
	PAD_CmdFromBus.CClDrsRgtV                  := C_VCCUOM;

	PAD_CmdFromBus.COpDrsLft                   := CI_ML_COpDrsLft; 
	PAD_CmdFromBus.COpDrsRgt                   := CI_ML_COpDrsRgt;
	PAD_CmdFromBus.COpDrsLftV                  := C_VCCUOM; 
	PAD_CmdFromBus.COpDrsRgtV                  := C_VCCUOM;

	PAD_CmdFromBus.CRlsDrsLft                   := CI_ML_CRlsDrsLft; 
	PAD_CmdFromBus.CRlsDrsRgt                   := CI_ML_CRlsDrsRgt;
	PAD_CmdFromBus.CRlsDrsLftV                  := C_VCCUOM; 
	PAD_CmdFromBus.CRlsDrsRgtV                  := C_VCCUOM;

	PAD_CmdFromBus.CSideLft := CI_ML_SCsdeEnLft;
	PAD_CmdFromBus.CSideRgt := CI_ML_SCsdeEnRgt;

	PAD_SDrTrmMdCst := CI_ML_SDrTrmMdAct;

	PAD_CmdFromBus.SDrsClsdLckdHw1   := CI_ML_SDrIntrLck1 ;
	PAD_CmdFromBus.SDrsClsdLckdHw1V  := C_VCCUOM;
	PAD_CmdFromBus.SDrsClsdLckdHw2   := CI_ML_SDrIntrLck2 ;
	PAD_CmdFromBus.SDrsClsdLckdHw2V  := C_VCCUOM;

	TC_SubOpMode.SMaintenanceMode := (CI_L1_SMntMdMC OR CI_L2_SMntMdMC OR CI_L3_SMntMdMC OR CI_L4_SMntMdMC);

	(*2F03.CON-481 and 2F03.CON-482 sending the next station ID to CCUS*)
	PAD_XNextStnID := CI_ML_GNextStnId;

	(*2F03.CON-24, 2F03.CON-25, 2F03.CON-36, 2F03.CON-37, 2F03.CON-468, 2F03.CON-467*)
	PAD_RTrnClDrsRgt := CI_ML_RClDrsRgt;
	PAD_RTrnClDrsLft := CI_ML_RClDrsLft;

	(*Commands to close the doors coming from the the cab with an active Crew Panel
	2F03.CON-404 and 2F03.CON-418 *)
	PAD_CPnlDrClLft := (CI_L1_CCrwPnlClsLft OR CI_L2_CCrwPnlClsLft OR CI_L3_CCrwPnlClsLft OR CI_L4_CCrwPnlClsLft);
	PAD_CPnlDrClRgt := (CI_L1_CCrwPnlClsRgt OR CI_L2_CCrwPnlClsRgt OR CI_L3_CCrwPnlClsRgt OR CI_L4_CCrwPnlClsRgt);

END_IF;
(*@KEY@: END_WORKSHEET *)
(*@KEY@: WORKSHEET
NAME: FromHMI
IEC_LANGUAGE: ST
*)
IF Enable

THEN
	PAD_CmdFromBus.CInhDrs_1:= BTAL_PackWord(
									VIS_SCar1DrInhF,(*corresponds to CI_HMI_SCar1DrInhF*)
									VIS_SCar1DrInhA,(*corresponds to CI_HMI_SCar1DrInhA*)
									FALSE,(*no door 3 in EAA*)
									FALSE,(*no door 4 in EAA*)
									VIS_SCar1DrInhD,(*corresponds to CI_HMI_SCar1DrInhD*)
									VIS_SCar1DrInhC,(*corresponds to CI_HMI_SCar1DrInhC*)
									VIS_SCar2DrInhC,(*corresponds to CI_HMI_SCar4DrInhF*)
									VIS_SCar2DrInhD,(*corresponds to CI_HMI_SCar4DrInhA*)
									FALSE,(*no door 3 in EAA*)
									FALSE,(*no door 4 in EAA*)
									VIS_SCar2DrInhA,(*corresponds to CI_HMI_SCar4DrInhD*)
									VIS_SCar2DrInhF,(*corresponds to CI_HMI_SCar4DrInhC*)
									VIS_SCar4DrInhC,(*corresponds to CI_HMI_SCar2DrInhC*)
									VIS_SCar4DrInhD,(*corresponds to CI_HMI_SCar2DrInhD*)
									FALSE,(*no door 3 in EAA*)
									FALSE(*no door 4 in EAA*)
										  );

	PAD_CmdFromBus.CInhDrs_2:= BTAL_PackWord(
									VIS_SCar4DrInhA,(*corresponds to CI_HMI_SCar2DrInhA*)
									VIS_SCar4DrInhF,(*corresponds to CI_HMI_SCar2DrInhF*)
									VIS_SCar5DrInhC,(*corresponds to CI_HMI_SCar5DrInhC*)
									VIS_SCar5DrInhD,(*corresponds to CI_HMI_SCar5DrInhD*)
									FALSE,(*no door 3 in EAA*)
									FALSE,(*no door 4 in EAA*)
									VIS_SCar5DrInhA,(*corresponds to CI_HMI_SCar5DrInhA*)
									VIS_SCar5DrInhF,(*corresponds to CI_HMI_SCar5DrInhF*)
									VIS_SCar3DrInhC,(*corresponds to CI_HMI_SCar3DrInhC*)
									VIS_SCar3DrInhD,(*corresponds to CI_HMI_SCar3DrInhD*)
									FALSE,(*no door 3 in EAA*)
									FALSE,(*no door 4 in EAA*)
									VIS_SCar3DrInhA,(*corresponds to CI_HMI_SCar3DrInhA*)
									VIS_SCar3DrInhF,(*corresponds to CI_HMI_SCar3DrInhF*)
									FALSE,
									FALSE
								  );
	PAD_CmdFromBus.CInhDrs_3:= WORD#0;

	PAD_ROpDrs01 := CI_HMI_SDrOp;
	PAD_ROpDrs01V := C_VHMICtrlMs;
	PAD_ROpDrs02 := CI_HMI_SDrOp;
	PAD_ROpDrs02V := C_VHMICtrlMs;

(* train clearence mode / *)

    PAD_SDrTrmMdPrsdHMI:= CI_HMI_STrnClrMd; 

	(* Maintenance cycle*)
	PAD_CarIn01.Door1.RMntCclSta := ( CI_HMI_SCar1DrCclF OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn01.Door1.RMntCclNo  := SEL( CI_HMI_SCar1DrCclF OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl );
	PAD_CarIn01.Door1.RMntCclSto := ( CI_HMI_SCar1DrCclF OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn01.Door1.RMntCclPau := ( CI_HMI_SCar1DrCclF OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;

	PAD_CarIn01.Door2.RMntCclSta := ( CI_HMI_SCar1DrCclA OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn01.Door2.RMntCclNo  := SEL( CI_HMI_SCar1DrCclA OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl );
	PAD_CarIn01.Door2.RMntCclSto := ( CI_HMI_SCar1DrCclA OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn01.Door2.RMntCclPau := ( CI_HMI_SCar1DrCclA OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;

	PAD_CarIn01.Door3.RMntCclSta := FALSE;
	PAD_CarIn01.Door3.RMntCclNo  := UDINT#0;
	PAD_CarIn01.Door3.RMntCclSto := FALSE;
	PAD_CarIn01.Door3.RMntCclPau := FALSE;

	PAD_CarIn01.Door4.RMntCclSta := FALSE;
	PAD_CarIn01.Door4.RMntCclNo  := UDINT#0;
	PAD_CarIn01.Door4.RMntCclSto := FALSE;
	PAD_CarIn01.Door4.RMntCclPau := FALSE;

	PAD_CarIn01.Door5.RMntCclSta := ( CI_HMI_SCar1DrCclD OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn01.Door5.RMntCclNo  := SEL( CI_HMI_SCar1DrCclD OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl );
	PAD_CarIn01.Door5.RMntCclSto := ( CI_HMI_SCar1DrCclD OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn01.Door5.RMntCclPau := ( CI_HMI_SCar1DrCclD OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;

	PAD_CarIn01.Door6.RMntCclSta := ( CI_HMI_SCar1DrCclC OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn01.Door6.RMntCclNo  := SEL( CI_HMI_SCar1DrCclC OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl );
	PAD_CarIn01.Door6.RMntCclSto := ( CI_HMI_SCar1DrCclC OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn01.Door6.RMntCclPau := ( CI_HMI_SCar1DrCclC OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;



	PAD_CarIn02.Door1.RMntCclSta := ( CI_HMI_SCar2DrCclC OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn02.Door1.RMntCclNo  := SEL( CI_HMI_SCar2DrCclC OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl );
	PAD_CarIn02.Door1.RMntCclSto := ( CI_HMI_SCar2DrCclC OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn02.Door1.RMntCclPau := ( CI_HMI_SCar2DrCclC OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;

	PAD_CarIn02.Door2.RMntCclSta := ( CI_HMI_SCar2DrCclD OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn02.Door2.RMntCclNo  := SEL( CI_HMI_SCar2DrCclD OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl );
	PAD_CarIn02.Door2.RMntCclSto := ( CI_HMI_SCar2DrCclD OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn02.Door2.RMntCclPau := ( CI_HMI_SCar2DrCclD OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;

	PAD_CarIn02.Door3.RMntCclSta := FALSE;
	PAD_CarIn02.Door3.RMntCclNo  := UDINT#0;
	PAD_CarIn02.Door3.RMntCclSto := FALSE;
	PAD_CarIn02.Door3.RMntCclPau := FALSE;

	PAD_CarIn02.Door4.RMntCclSta := FALSE;
	PAD_CarIn02.Door4.RMntCclNo  := UDINT#0;
	PAD_CarIn02.Door4.RMntCclSto := FALSE;
	PAD_CarIn02.Door4.RMntCclPau := FALSE;

	PAD_CarIn02.Door5.RMntCclSta := ( CI_HMI_SCar2DrCclA OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn02.Door5.RMntCclNo  := SEL( CI_HMI_SCar2DrCclA OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl);
	PAD_CarIn02.Door5.RMntCclSto := ( CI_HMI_SCar2DrCclA OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn02.Door5.RMntCclPau := ( CI_HMI_SCar2DrCclA OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;

	PAD_CarIn02.Door6.RMntCclSta := ( CI_HMI_SCar2DrCclF OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn02.Door6.RMntCclNo  := SEL( CI_HMI_SCar2DrCclF OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl);
	PAD_CarIn02.Door6.RMntCclSto := ( CI_HMI_SCar2DrCclF OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn02.Door6.RMntCclPau := ( CI_HMI_SCar2DrCclF OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;



	PAD_CarIn03.Door1.RMntCclSta := ( CI_HMI_SCar4DrCclC OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn03.Door1.RMntCclNo  := SEL( CI_HMI_SCar4DrCclC OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl);
	PAD_CarIn03.Door1.RMntCclSto := ( CI_HMI_SCar4DrCclC OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn03.Door1.RMntCclPau := ( CI_HMI_SCar4DrCclC OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;

	PAD_CarIn03.Door2.RMntCclSta := ( CI_HMI_SCar4DrCclD OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn03.Door2.RMntCclNo  := SEL( CI_HMI_SCar4DrCclD OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl);
	PAD_CarIn03.Door2.RMntCclSto := ( CI_HMI_SCar4DrCclD OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn03.Door2.RMntCclPau := ( CI_HMI_SCar4DrCclD OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;

	PAD_CarIn03.Door3.RMntCclSta := FALSE;
	PAD_CarIn03.Door3.RMntCclNo  := UDINT#0;
	PAD_CarIn03.Door3.RMntCclSto := FALSE;
	PAD_CarIn03.Door3.RMntCclPau := FALSE;

	PAD_CarIn03.Door4.RMntCclSta := FALSE;
	PAD_CarIn03.Door4.RMntCclNo  := UDINT#0;
	PAD_CarIn03.Door4.RMntCclSto := FALSE;
	PAD_CarIn03.Door4.RMntCclPau := FALSE;

	PAD_CarIn03.Door5.RMntCclSta := ( CI_HMI_SCar4DrCclA OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn03.Door5.RMntCclNo  := SEL( CI_HMI_SCar4DrCclA OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl);
	PAD_CarIn03.Door5.RMntCclSto := ( CI_HMI_SCar4DrCclA OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn03.Door5.RMntCclPau := ( CI_HMI_SCar4DrCclA OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;

	PAD_CarIn03.Door6.RMntCclSta := ( CI_HMI_SCar4DrCclF OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn03.Door6.RMntCclNo  := SEL( CI_HMI_SCar4DrCclF OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl);
	PAD_CarIn03.Door6.RMntCclSto := ( CI_HMI_SCar4DrCclF OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn03.Door6.RMntCclPau := ( CI_HMI_SCar4DrCclF OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;


		PAD_CarIn04.Door1.RMntCclSta := ( CI_HMI_SCar5DrCclC OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn04.Door1.RMntCclNo  := SEL( CI_HMI_SCar5DrCclC OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl);
	PAD_CarIn04.Door1.RMntCclSto := ( CI_HMI_SCar5DrCclC OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn04.Door1.RMntCclPau := ( CI_HMI_SCar5DrCclC OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;

	PAD_CarIn04.Door2.RMntCclSta := ( CI_HMI_SCar5DrCclD OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn04.Door2.RMntCclNo  := SEL( CI_HMI_SCar5DrCclD OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl);
	PAD_CarIn04.Door2.RMntCclSto := ( CI_HMI_SCar5DrCclD OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn04.Door2.RMntCclPau := ( CI_HMI_SCar5DrCclD OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;

	PAD_CarIn04.Door3.RMntCclSta := FALSE;
	PAD_CarIn04.Door3.RMntCclNo  := UDINT#0;
	PAD_CarIn04.Door3.RMntCclSto := FALSE;
	PAD_CarIn04.Door3.RMntCclPau := FALSE;

	PAD_CarIn04.Door4.RMntCclSta := FALSE;
	PAD_CarIn04.Door4.RMntCclNo  := UDINT#0;
	PAD_CarIn04.Door4.RMntCclSto := FALSE;
	PAD_CarIn04.Door4.RMntCclPau := FALSE;

	PAD_CarIn04.Door5.RMntCclSta := ( CI_HMI_SCar5DrCclA OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn04.Door5.RMntCclNo  := SEL( CI_HMI_SCar5DrCclA OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl);
	PAD_CarIn04.Door5.RMntCclSto := ( CI_HMI_SCar5DrCclA OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn04.Door5.RMntCclPau := ( CI_HMI_SCar5DrCclA OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;

	PAD_CarIn04.Door6.RMntCclSta := ( CI_HMI_SCar5DrCclF OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn04.Door6.RMntCclNo  := SEL( CI_HMI_SCar5DrCclF OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl);
	PAD_CarIn04.Door6.RMntCclSto := ( CI_HMI_SCar5DrCclF OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn04.Door6.RMntCclPau := ( CI_HMI_SCar5DrCclF OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;



	PAD_CarIn05.Door1.RMntCclSta := ( CI_HMI_SCar3DrCclC OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn05.Door1.RMntCclNo  := SEL( CI_HMI_SCar3DrCclC OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl);
	PAD_CarIn05.Door1.RMntCclSto := ( CI_HMI_SCar3DrCclC OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn05.Door1.RMntCclPau := ( CI_HMI_SCar3DrCclC OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;

	PAD_CarIn05.Door2.RMntCclSta := ( CI_HMI_SCar3DrCclD OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn05.Door2.RMntCclNo  := SEL( CI_HMI_SCar3DrCclD OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl);
	PAD_CarIn05.Door2.RMntCclSto := ( CI_HMI_SCar3DrCclD OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn05.Door2.RMntCclPau := ( CI_HMI_SCar3DrCclD OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;

	PAD_CarIn05.Door3.RMntCclSta := FALSE;
	PAD_CarIn05.Door3.RMntCclNo  := UDINT#0;
	PAD_CarIn05.Door3.RMntCclSto := FALSE;
	PAD_CarIn05.Door3.RMntCclPau := FALSE;

	PAD_CarIn05.Door4.RMntCclSta := FALSE;
	PAD_CarIn05.Door4.RMntCclNo  := UDINT#0;
	PAD_CarIn05.Door4.RMntCclSto := FALSE;
	PAD_CarIn05.Door4.RMntCclPau := FALSE;

	PAD_CarIn05.Door5.RMntCclSta := ( CI_HMI_SCar3DrCclA OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn05.Door5.RMntCclNo  := SEL( CI_HMI_SCar3DrCclA OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl);
	PAD_CarIn05.Door5.RMntCclSto := ( CI_HMI_SCar3DrCclA OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn05.Door5.RMntCclPau := ( CI_HMI_SCar3DrCclA OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;

	PAD_CarIn05.Door6.RMntCclSta := ( CI_HMI_SCar3DrCclF OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPb;
	PAD_CarIn05.Door6.RMntCclNo  := SEL( CI_HMI_SCar3DrCclF OR CI_HMI_SDrCclEnAllPb, UDINT#0, CI_HMI_XDrCcl);
	PAD_CarIn05.Door6.RMntCclSto := ( CI_HMI_SCar3DrCclF OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclAbortPb;
	PAD_CarIn05.Door6.RMntCclPau := ( CI_HMI_SCar3DrCclF OR CI_HMI_SDrCclEnAllPb ) AND CI_HMI_SDrCclPausePb;
END_IF;
(*@KEY@: END_WORKSHEET *)
(*@KEY@: WORKSHEET
NAME: FromMIO
IEC_LANGUAGE: ST
*)
IF Enable
    THEN
   (* All MIO signal value and validity for value will be packed in a single user data type (UDT).
      For other Telegram signal input value will be direct copied and a saparate validity per telergam will be 
      copied. No value and validity combined in a UDT *)

    (* CAR1 / DM *)
    PAD_CarIn01.Door1.DoorwayKeyAct  :=  CI_1DCUF_LeftDoorwayKey OR CI_1DCUF_RightDoorwayKey;
    PAD_CarIn01.Door2.DoorwayKeyAct  :=  CI_1DCUA_LeftDoorwayKey OR CI_1DCUA_RightDoorwayKey;   
    PAD_CarIn01.Door3.DoorwayKeyAct  :=  FALSE;   
    PAD_CarIn01.Door4.DoorwayKeyAct  :=  FALSE;
    PAD_CarIn01.Door5.DoorwayKeyAct  :=  CI_1DCUD_LeftDoorwayKey OR CI_1DCUD_RightDoorwayKey;
    PAD_CarIn01.Door6.DoorwayKeyAct  :=  CI_1DCUC_LeftDoorwayKey OR CI_1DCUC_RightDoorwayKey;  
	
    (*  CAR2 / PML*)
    PAD_CarIn02.Door1.DoorwayKeyAct  :=  CI_2DCUC_LeftDoorwayKey OR CI_2DCUF_RightDoorwayKey;
    PAD_CarIn02.Door2.DoorwayKeyAct  :=  CI_2DCUD_LeftDoorwayKey OR CI_2DCUA_RightDoorwayKey;   
    PAD_CarIn02.Door3.DoorwayKeyAct  :=  FALSE;   
    PAD_CarIn02.Door4.DoorwayKeyAct  :=  FALSE;
    PAD_CarIn02.Door5.DoorwayKeyAct  :=  CI_2DCUA_LeftDoorwayKey OR CI_2DCUD_RightDoorwayKey;
    PAD_CarIn02.Door6.DoorwayKeyAct  :=  CI_2DCUF_LeftDoorwayKey OR CI_2DCUC_RightDoorwayKey;  

    (*MIO's Cab doors / door Interlock*)
    PAD_HwDoorLoop.SSDrTrIntrlckRly1_1  :=  CI_MIO_SDrIntrlckRly1_1 ;
    PAD_HwDoorLoop.SSDrTrIntrlckRly1_1V :=  CI_MIO_SDrIntrlckRly1_1V ;
    PAD_HwDoorLoop.SSDrTrIntrlckRly2_1  :=  CI_MIO_SDrIntrlckRly2_1 ;
    PAD_HwDoorLoop.SSDrTrIntrlckRly2_1V	:=  CI_MIO_SDrIntrlckRly2_1V ;
    PAD_HwDoorLoop.SSDrTrIntrlckRly1_2  :=  CI_MIO_SDrIntrlckRly1_2 ;
    PAD_HwDoorLoop.SSDrTrIntrlckRly1_2V :=  CI_MIO_SDrIntrlckRly1_2V ;
    PAD_HwDoorLoop.SSDrTrIntrlckRly2_2  :=  CI_MIO_SDrIntrlckRly2_2 ;
    PAD_HwDoorLoop.SSDrTrIntrlckRly2_2V	:=  CI_MIO_SDrIntrlckRly2_2V ;
    PAD_HwDoorLoop.SDrTrIntrlckIslC1    :=  CI_MIO_SDrTrIntrlckIsl_1 ;
    PAD_HwDoorLoop.SDrTrIntrlckIslC1V 	:=  CI_MIO_SDrTrIntrlckIsl_1V ;
    PAD_HwDoorLoop.SDrTrIntrlckIslC2    :=  CI_MIO_SDrTrIntrlckIsl_2 ;
    PAD_HwDoorLoop.SDrTrIntrlckIslC2V  	:=  CI_MIO_SDrTrIntrlckIsl_2V ;
    PAD_HwDoorLoop.SDrTrIntrLckC1       :=  CI_MIO_SDrTrIntrlck_1 ;
    PAD_HwDoorLoop.SDrTrIntrLckC1V   	:=  CI_MIO_SDrTrIntrlck_1V ;
    PAD_HwDoorLoop.SDrTrIntrLckC2    	:=  CI_MIO_SDrTrIntrlck_2 ;
    PAD_HwDoorLoop.SDrTrIntrLckC2V   	:=  CI_MIO_SDrTrIntrlck_2V ;
	PAD_HwDoorLoop.SCab1DrA01			:=	NOT(CI_MIO_SCabDrOpSw1A_1) ; (* 0 = cab door closed, 1 = cab door open*)
	PAD_HwDoorLoop.SCab1DrA01V			:=	CI_MIO_SCabDrOpSw1A_1V ;
	PAD_HwDoorLoop.SCab1DrA02			:=	NOT(CI_MIO_SCabDrOpSw2A_1) ;  (* 0 = cab door closed, 1 = cab door open*)
	PAD_HwDoorLoop.SCab1DrA02V			:=	CI_MIO_SCabDrOpSw2A_1V ;
	PAD_HwDoorLoop.SCab1DrB01			:=	NOT(CI_MIO_SCabDrOpSw1B_1) ;  (* 0 = cab door closed, 1 = cab door open*)
	PAD_HwDoorLoop.SCab1DrB01V			:=	CI_MIO_SCabDrOpSw1B_1V ;
	PAD_HwDoorLoop.SCab1DrB02			:=	NOT(CI_MIO_SCabDrOpSw2B_1) ;  (* 0 = cab door closed, 1 = cab door open*)
	PAD_HwDoorLoop.SCab1DrB02V			:=	CI_MIO_SCabDrOpSw2B_1V ;
	PAD_HwDoorLoop.SCab2DrA01			:=	NOT(CI_MIO_SCabDrOpSw1A_2) ;  (* 0 = cab door closed, 1 = cab door open*)
	PAD_HwDoorLoop.SCab2DrA01V			:=	CI_MIO_SCabDrOpSw1A_2V ;
	PAD_HwDoorLoop.SCab2DrA02			:=	NOT(CI_MIO_SCabDrOpSw2A_2) ;  (* 0 = cab door closed, 1 = cab door open*)
	PAD_HwDoorLoop.SCab2DrA02V			:=	CI_MIO_SCabDrOpSw2A_2V ;
	PAD_HwDoorLoop.SCab2DrB01			:=	NOT(CI_MIO_SCabDrOpSw1B_2) ;  (* 0 = cab door closed, 1 = cab door open*)
	PAD_HwDoorLoop.SCab2DrB01V			:=	CI_MIO_SCabDrOpSw1B_2V ;
	PAD_HwDoorLoop.SCab2DrB02			:=	NOT(CI_MIO_SCabDrOpSw2B_2) ;  (* 0 = cab door closed, 1 = cab door open*)
	PAD_HwDoorLoop.SCab2DrB02V			:=	CI_MIO_SCabDrOpSw2B_2V ;
	PAD_HwDoorLoop.SCabSalDrCl_1		:=	CI_MIO_SCabSalDrCl_1 ;
	PAD_HwDoorLoop.SCabSalDrCl_1V		:=	CI_MIO_SCabSalDrCl_1V ;
	PAD_HwDoorLoop.SCabSalDrCl_2		:=	CI_MIO_SCabSalDrCl_2 ;
	PAD_HwDoorLoop.SCabSalDrCl_2V		:=	CI_MIO_SCabSalDrCl_2V ;


   		(* Guard Panel*)
(*DM1*)	PAD_SSalCrwPnlAct_1	:= CI_MIO_SSalCrwPnlAct_1 and CI_MIO_SSalCrwPnlAct_1V;
(*PMLW*)PAD_SSalCrwPnlAct_3	:= CI_MIO_SSalCrwPnlAct_2 and CI_MIO_SSalCrwPnlAct_2V;
(*DM2*)	PAD_SSalCrwPnlAct_2	:= CI_MIO_SSalCrwPnlAct_3 and CI_MIO_SSalCrwPnlAct_3V;
(*M1L*)	PAD_SSalCrwPnlAct_4	:= CI_MIO_SSalCrwPnlAct_4 and CI_MIO_SSalCrwPnlAct_4V;
(*M2L*)	PAD_SSalCrwPnlAct_5	:= CI_MIO_SSalCrwPnlAct_5 and CI_MIO_SSalCrwPnlAct_5V;
   
		(* Guard Panel Close Door All Pushbuttons*)
(*DM1*)	PAD_SSalCrwDrClPbLft_1 := CI_MIO_SSalCrwDrClPbLft_1 and CI_MIO_SSalCrwDrClPbLft_1V;
		PAD_SSalCrwDrClPbRgt_1 := CI_MIO_SSalCrwDrClPbRgt_1 and CI_MIO_SSalCrwDrClPbRgt_1V;
(*DM2*)	PAD_SSalCrwDrClPbLft_2 := CI_MIO_SSalCrwDrClPbLft_3 and CI_MIO_SSalCrwDrClPbLft_3V;
		PAD_SSalCrwDrClPbRgt_2 := CI_MIO_SSalCrwDrClPbRgt_3 and CI_MIO_SSalCrwDrClPbRgt_3V;
(*PMLW*)PAD_SSalCrwDrClPbLft_3 := CI_MIO_SSalCrwDrClPbLft_2 and CI_MIO_SSalCrwDrClPbLft_2V;
		PAD_SSalCrwDrClPbRgt_3 := CI_MIO_SSalCrwDrClPbRgt_2 and CI_MIO_SSalCrwDrClPbRgt_2V;
(*M1L*)	PAD_SSalCrwDrClPbLft_4 := CI_MIO_SSalCrwDrClPbLft_4 and CI_MIO_SSalCrwDrClPbLft_4V;
		PAD_SSalCrwDrClPbRgt_4 := CI_MIO_SSalCrwDrClPbRgt_4 and CI_MIO_SSalCrwDrClPbRgt_4V;
(*M2L*) PAD_SSalCrwDrClPbLft_5 := CI_MIO_SSalCrwDrClPbLft_5 and CI_MIO_SSalCrwDrClPbLft_5V;
		PAD_SSalCrwDrClPbRgt_5 := CI_MIO_SSalCrwDrClPbRgt_5 and CI_MIO_SSalCrwDrClPbRgt_5V;

		(* Either panel keyswitch of a single cabcar is active *)
		PAD_SCrwPnlAct_1 := CI_MIO_SCrwPnlAct_1 and CI_MIO_SCrwPnlAct_1V;
		PAD_SCrwPnlAct_3 := CI_MIO_SCrwPnlAct_2 and CI_MIO_SCrwPnlAct_2V;

		PAD_CarIn01.SSalCrwPnlAct := PAD_SSalCrwPnlAct_1;
		PAD_CarIn02.SSalCrwPnlAct := PAD_SSalCrwPnlAct_2;
		PAD_CarIn03.SSalCrwPnlAct := PAD_SSalCrwPnlAct_3;
		PAD_CarIn04.SSalCrwPnlAct := PAD_SSalCrwPnlAct_4;
		PAD_CarIn05.SSalCrwPnlAct := PAD_SSalCrwPnlAct_5;

(*
	PAD_DcuIn_01_01.SCndtMd := FALSE;   					 PAD_DcuIn_01_01.SCndtMdV := FALSE;
	PAD_DcuIn_01_02.SCndtMd := FALSE;   				     PAD_DcuIn_01_02.SCndtMdV := FALSE;
	PAD_DcuIn_01_05.SCndtMd := FALSE;   				     PAD_DcuIn_01_05.SCndtMdV := FALSE;
	PAD_DcuIn_01_06.SCndtMd := FALSE;        				 PAD_DcuIn_01_06.SCndtMdV := FALSE;
	PAD_DcuIn_02_01.SCndtMd := FALSE;   					 PAD_DcuIn_02_01.SCndtMdV := FALSE;
	PAD_DcuIn_02_02.SCndtMd := FALSE;   					 PAD_DcuIn_02_02.SCndtMdV := FALSE;
	PAD_DcuIn_02_05.SCndtMd := FALSE;   					 PAD_DcuIn_02_05.SCndtMdV := FALSE;
	PAD_DcuIn_02_06.SCndtMd := FALSE;   					 PAD_DcuIn_02_06.SCndtMdV := FALSE;
	PAD_DcuIn_03_01.SCndtMd := FALSE;   					 PAD_DcuIn_03_01.SCndtMdV := FALSE;
	PAD_DcuIn_03_02.SCndtMd := FALSE;   					 PAD_DcuIn_03_02.SCndtMdV := FALSE;
	PAD_DcuIn_03_05.SCndtMd := CI_MIO_SSalCrwDrClPbLft_2;    PAD_DcuIn_03_05.SCndtMdV := CI_MIO_SSalCrwDrClPbLft_2V;
	PAD_DcuIn_03_06.SCndtMd := CI_MIO_SSalCrwDrClPbRgt_2;    PAD_DcuIn_03_06.SCndtMdV := CI_MIO_SSalCrwDrClPbRgt_2V;
	PAD_DcuIn_04_01.SCndtMd := FALSE;   					 PAD_DcuIn_04_01.SCndtMdV := FALSE;
	PAD_DcuIn_04_02.SCndtMd := FALSE;    					 PAD_DcuIn_04_02.SCndtMdV := FALSE;
	PAD_DcuIn_04_05.SCndtMd := FALSE;   					 PAD_DcuIn_04_05.SCndtMdV := FALSE;
	PAD_DcuIn_04_06.SCndtMd := FALSE;   					 PAD_DcuIn_04_06.SCndtMdV := FALSE;
	PAD_DcuIn_05_01.SCndtMd := FALSE;   					 PAD_DcuIn_05_01.SCndtMdV := FALSE;
	PAD_DcuIn_05_02.SCndtMd := FALSE;   					 PAD_DcuIn_05_02.SCndtMdV := FALSE;
	PAD_DcuIn_05_05.SCndtMd := CI_MIO_SSalCrwDrClPbLft_1;    PAD_DcuIn_05_05.SCndtMdV := CI_MIO_SSalCrwDrClPbLft_1V;
	PAD_DcuIn_05_06.SCndtMd := CI_MIO_SSalCrwDrClPbRgt_1;    PAD_DcuIn_05_06.SCndtMdV := CI_MIO_SSalCrwDrClPbRgt_1V; 
*)
	
	(*UserIf ..cab 1*)
    PAD_RClDrsA01  := CI_MIO_SDrClPbLft_1;
    PAD_RClDrsA01V := CI_MIO_SDrClPbLft_1V;
    PAD_RClDrsB01  := CI_MIO_SDrClPbRgt_1;
    PAD_RClDrsB01V := CI_MIO_SDrClPbRgt_1V;

	PAD_RClDrsASd01  := CI_MIO_SDrClPbLft2_1;
    PAD_RClDrsASd01V := CI_MIO_SDrClPbLft2_1V;
    PAD_RClDrsBSd01  := CI_MIO_SDrClPbRgt2_1;
    PAD_RClDrsBSd01V := CI_MIO_SDrClPbRgt2_1V;

    PAD_RRlsDrs01 := CI_MIO_SDrRelPbRgt1_1 OR CI_MIO_SDrRelPbLft1_1;
    PAD_RRlsDrs01V := CI_MIO_SDrRelPbRgt1_1V OR CI_MIO_SDrRelPbLft1_1V;
    
    PAD_RSideA01 := CI_MIO_SDrRelPbLft1_1;
    PAD_RSideA01V := CI_MIO_SDrRelPbLft1_1V;
    PAD_RSideB01 := CI_MIO_SDrRelPbRgt1_1;
    PAD_RSideB01V := CI_MIO_SDrRelPbRgt1_1V;

    (*UserIf ..cab 2*)
    PAD_RClDrsB02  := CI_MIO_SDrClPbLft_2;
    PAD_RClDrsB02V := CI_MIO_SDrClPbLft_2V;
    PAD_RClDrsA02  := CI_MIO_SDrClPbRgt_2;
    PAD_RClDrsA02V := CI_MIO_SDrClPbRgt_2V;

	PAD_RClDrsBSd02  := CI_MIO_SDrClPbLft2_2;
    PAD_RClDrsBSd02V := CI_MIO_SDrClPbLft2_2V;
    PAD_RClDrsASd02  := CI_MIO_SDrClPbRgt2_2;
    PAD_RClDrsASd02V := CI_MIO_SDrClPbRgt2_2V;

    PAD_RRlsDrs02 := CI_MIO_SDrRelPbRgt1_2 OR CI_MIO_SDrRelPbLft1_2;
    PAD_RRlsDrs02V := CI_MIO_SDrRelPbRgt1_2V OR CI_MIO_SDrRelPbLft1_2V;
   
    PAD_RSideA02 := CI_MIO_SDrRelPbRgt1_2;
    PAD_RSideA02V := CI_MIO_SDrRelPbRgt1_2V;
    PAD_RSideB02 := CI_MIO_SDrRelPbLft1_2;
    PAD_RSideB02V := CI_MIO_SDrRelPbLft1_2V;

	PAD_RCsdeAlmAck := (CI_MIO_SFltAlmAck_1 AND CI_MIO_SFltAlmAck_1V) OR (CI_MIO_SFltAlmAck_2 AND CI_MIO_SFltAlmAck_2V);

	PAD_DcuEnHwFbA_1 := CI_DCUA1_SSdoEnFb;
	PAD_DcuEnHwFbF_1 := CI_DCUF1_SSdoEnFb;
	PAD_DcuEnHwFbA_3 := CI_DCUA3_SSdoEnFb;
	PAD_DcuEnHwFbF_3 := CI_DCUF3_SSdoEnFb;

	(*Drag Detection Feedback (Sensitive Edge Deactivation)*)
    PAD_SSnstvEdgDeact_1  := CI_MIO_SSnstvEdgDeact_1;
    PAD_SSnstvEdgDeact_2  := CI_MIO_SSnstvEdgDeact_2;

	(*Emergency Brake Relays (for drag detection)*)
	PAD_SEmBrRly_1 := CI_MIO_SEmBrRly_1;
	PAD_SEmBrRly_2 := CI_MIO_SEmBrRly_2;

END_IF;
(*@KEY@: END_WORKSHEET *)
(*@KEY@: WORKSHEET
NAME: FromODBS
IEC_LANGUAGE: ST
*)
PAD_PTClearTrnCl:= PAD_PClrTrnClTm;
(*@KEY@: END_WORKSHEET *)
(*@KEY@: WORKSHEET
NAME: SigNeedToBeUsed
IEC_LANGUAGE: ST
*)
IF NOT EnSigNeedToBeSkip
   THEN

   CI_HMI_ASfEvt  := CI_HMI_ASfEvt;

END_IF;
(*@KEY@: END_WORKSHEET *)
(*@KEY@: WORKSHEET
NAME: FromTDR
IEC_LANGUAGE: ST
*)
IF Enable
    THEN
	PAD_SDiDrRelSideA := CI_TDR_SDiDrRelSideA; (* JR Side A Door Release TW Feedback*)
	PAD_SDiDrRelSideB := CI_TDR_SDiDrRelSideB; (* JR Side B Door Release TW Feedback*)
	PAD_SDiDrClSideA := CI_TDR_SDiDrClSideA;   (* JR Side A Door Close TW Feedback *)
	PAD_SDiDrClSideB := CI_TDR_SDiDrClSideB;   (* JR Side B Door Close TW Feedback *)
    PAD_STdrV := C_VTDR; (* TDR Valid *)
	PAD_SColdMvmnt := CI_TDR_SDoColdMvmnt; (*Cold movement detected*)

END_IF;
(*@KEY@: END_WORKSHEET *)
END_PROGRAM
]]></iec-data>
 <interface>
  <variable-group name="NewGroup"/>
  <variable-group name="Input- PAD_Internal">
   <variable name="CO_DCU1_ZOp" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)]]></comment>
   </variable>
   <variable name="CO_DCU2_ZOp" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)]]></comment>
   </variable>
   <variable name="CO_DCU3_ZOp" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)]]></comment>
   </variable>
   <variable name="CO_DCU4_ZOp" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)]]></comment>
   </variable>
   <variable name="CO_DCU5_ZOp" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)]]></comment>
   </variable>
   <variable name="CO_DCU1_ZCl" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)]]></comment>
   </variable>
   <variable name="CO_DCU2_ZCl" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)]]></comment>
   </variable>
   <variable name="CO_DCU3_ZCl" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)]]></comment>
   </variable>
   <variable name="CO_DCU4_ZCl" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)]]></comment>
   </variable>
   <variable name="CO_DCU5_ZCl" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)]]></comment>
   </variable>
  </variable-group>
  <variable-group name="Input- OtherFA">
   <variable name="Enable_FA" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Enable PAD FA]]></comment>
   </variable>
   <variable name="TCC_SOrientV" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[indicates whether the orientation is valid]]></comment>
   </variable>
   <variable name="TCC_SOrientSame" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[indicates whether the consist  orientation is same to train direction]]></comment>
   </variable>
   <variable name="TCC_SOrientInverse" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[indicates whether the  consist  orientation is inverse to train direction]]></comment>
   </variable>
   <variable name="TCC_T_SCabAct" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab Active in Train]]></comment>
   </variable>
   <variable name="TCC_SCabAct_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab is active in car 1]]></comment>
   </variable>
   <variable name="TCC_SCabAct_3" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab is active in car 3]]></comment>
   </variable>
   <variable name="TCC_XNumCst" array-size="1" type="MWT_INT" usage="input">
    <comment><![CDATA[Number of consists, 1=1]]></comment>
   </variable>
   <variable name="C_SSysInitDone" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[System initalisation is done]]></comment>
   </variable>
   <variable name="TCC_SCarNrTrnCfg" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[Value: Total Number of cars in train configuration]]></comment>
   </variable>
   <variable name="TCC_SMaster" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[driver desk 1 in consist is activ and acknowledged by driver]]></comment>
   </variable>
   <variable name="PAD_PXNoOfObstAttmpt" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[No. Obstacles Re-open or Re-close attempts; (Global signal which is the same for all doors); Default : 3]]></comment>
   </variable>
   <variable name="PAD_PXReOpDist" array-size="1" type="MWT_UINT" usage="input">
    <comment><![CDATA[Re-opening Distance; Re-opening width on door obstacle detection; Default : 100]]></comment>
   </variable>
   <variable name="PAD_PAutClTm" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[Auto close time parameter]]></comment>
   </variable>
   <variable name="PAD_PClrTrnClTm" array-size="1" type="MWT_TIME" usage="input">
    <comment><![CDATA[Clear train closing time parameter]]></comment>
   </variable>
   <variable name="PAD_PZDisIntClPbCar1" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[Disable Interior Local Door Close P/B (bitmap: bit0=DcuA, bit1=DcuB, bit2=DcuC,...)]]></comment>
   </variable>
   <variable name="PAD_PZDisIntClPbCar2" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[Disable Interior Local Door Close P/B (bitmap: bit0=DcuA, bit1=DcuB, bit2=DcuC,...)]]></comment>
   </variable>
   <variable name="PAD_PZDisIntClPbCar3" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[Disable Interior Local Door Close P/B (bitmap: bit0=DcuA, bit1=DcuB, bit2=DcuC,...)]]></comment>
   </variable>
   <variable name="PAD_PZDisIntClPbCar4" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[Disable Interior Local Door Close P/B (bitmap: bit0=DcuA, bit1=DcuB, bit2=DcuC,...)]]></comment>
   </variable>
   <variable name="PAD_PZDisIntClPbCar5" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[Disable Interior Local Door Close P/B (bitmap: bit0=DcuA, bit1=DcuB, bit2=DcuC,...)]]></comment>
   </variable>
   <variable name="FM_STrnFireDtc" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Fire detected in the train]]></comment>
   </variable>
   <variable name="TCC_XCarNrTrnCfg" array-size="1" type="MWT_INT" usage="input">
    <comment><![CDATA[Number of Cars in each consists in train]]></comment>
   </variable>
   <variable name="TCC_XCstNr" array-size="1" type="MWT_INT" usage="input">
    <comment><![CDATA[Number of local consist 1=1]]></comment>
   </variable>
   <variable name="VIS_SCar1DrInhA" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door A Car1 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar1DrInhC" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door C Car1 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar1DrInhD" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door D Car1 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar1DrInhF" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door F Car1 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar2DrInhA" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door A Car2 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar2DrInhC" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door C Car2 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar2DrInhD" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door D Car2 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar2DrInhF" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door F Car2 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar3DrInhA" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door A Car3 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar3DrInhC" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door C Car3 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar3DrInhD" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door D Car3 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar3DrInhF" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door F Car3 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar4DrInhA" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door A Car4 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar4DrInhC" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door C Car4 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar4DrInhD" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door D Car4 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar4DrInhF" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door F Car4 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar5DrInhA" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door A Car5 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar5DrInhC" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door C Car5 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar5DrInhD" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door D Car5 Inhibit Door Request]]></comment>
   </variable>
   <variable name="VIS_SCar5DrInhF" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door F Car5 Inhibit Door Request]]></comment>
   </variable>
   <variable name="DIACD_CSideLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Command to close side right]]></comment>
   </variable>
   <variable name="DIACD_CSideRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Command to close side left]]></comment>
   </variable>
   <variable name="TCM_GrdOnlyMd" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard Only Mode is Active]]></comment>
   </variable>
  </variable-group>
  <variable-group name="Input - From Train Bus">
   <variable name="CI_ML_SDrTrmMdAct" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[command to activate terminal station mode]]></comment>
   </variable>
   <variable name="CI_ML_COpDrsLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[command to open doors on the left side of the train]]></comment>
   </variable>
   <variable name="CI_ML_COpDrsRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[command to open doors on the right side of the train]]></comment>
   </variable>
   <variable name="CI_ML_CRlsDrsLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[command to release doors on the left side of the train]]></comment>
   </variable>
   <variable name="CI_ML_CRlsDrsRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[command to release doors on the right side of the train]]></comment>
   </variable>
   <variable name="CI_ML_CClDrsLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[command to close doors on the left side of the train]]></comment>
   </variable>
   <variable name="CI_ML_CClDrsRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[command to close doors on the right side of the train]]></comment>
   </variable>
   <variable name="CI_ML_SCsdeEnLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Train status CSDE left side enabled]]></comment>
   </variable>
   <variable name="CI_ML_SCsdeEnRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Train status CSDE right side enabled]]></comment>
   </variable>
   <variable name="CI_ML_SDrIntrLck1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Interlock Singnal 1]]></comment>
   </variable>
   <variable name="CI_ML_SDrIntrLck2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Interlock Singnal 2]]></comment>
   </variable>
   <variable name="CI_ML_GNextStnId" array-size="1" type="MWT_UDINT" usage="input">
    <comment><![CDATA[GW: Next station ID]]></comment>
   </variable>
   <variable name="CI_ML_RClDrsRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Request to close doors on the right side of the train]]></comment>
   </variable>
   <variable name="CI_ML_RClDrsLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Request to close doors on the right side of the train]]></comment>
   </variable>
   <variable name="C_VCCUOM" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[validity bit for train wide commands inputs]]></comment>
   </variable>
   <variable name="CI_L1_SDrsClsLck" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors closed and locked in consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SDrsClsdLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors closed and locked on left side in consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SDrsClsdRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors closed and locked on right side in consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SCabDrsClsdLft1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab doors closed and locked on left side in consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SCabDrsClsdRgt1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab doors closed and locked on right side in consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SCabDrsClsdLft2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab doors closed and locked on left side in consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SCabDrsClsdRgt2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab doors closed and locked on right side in consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SCabSalDrCls1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab-saloon door closed cab 1]]></comment>
   </variable>
   <variable name="CI_L1_SCabSalDrCls2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab-saloon door closed cab 2]]></comment>
   </variable>
   <variable name="CI_L1_SDrsObstclDetCls" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status obastacles are detected  in consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SClsDrsLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[feedback command close door on left side in consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SClsDrsRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[feedback command close door on right side in consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SDiStp" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[feedback command disable steps in consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SDrsRlsdLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors released on left side in consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SDrsRlsdRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors released on right side in consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SDrsOpndLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors opened on left side in consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SDrsOpndRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors opened on right side in consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SEmAcsAct" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status emergency access is active in consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SEmEgrAct" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status emergency egress is active in consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SServKeyAct" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status service key is active is active in consist 1]]></comment>
   </variable>
   <variable name="CI_L2_SDrsClsLck" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors closed and locked in consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SDrsClsdLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors closed and locked on left side in consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SDrsClsdRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors closed and locked on right side in consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SCabDrsClsdLft1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab doors closed and locked on left side in consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SCabDrsClsdRgt1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab doors closed and locked on right side in consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SCabDrsClsdLft2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab doors closed and locked on left side in consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SCabDrsClsdRgt2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab doors closed and locked on right side in consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SCabSalDrCls1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab-saloon door closed cab 1]]></comment>
   </variable>
   <variable name="CI_L2_SCabSalDrCls2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab-saloon door closed cab 2]]></comment>
   </variable>
   <variable name="CI_L2_SDrsObstclDetCls" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[statusobastacles are detected  in consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SClsDrsLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[feedback command close door on left side in consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SClsDrsRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[feedback command close door on right side in consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SDiStp" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[feedback command disable steps in consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SDrsRlsdLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors released on left side in consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SDrsRlsdRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors released on right side in consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SDrsOpndLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors opened on left side in consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SDrsOpndRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors opened on right side in consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SEmAcsAct" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status emergency access is active in consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SEmEgrAct" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status emergency egress is active in consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SServKeyAct" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status service key is active is active in consist 2]]></comment>
   </variable>
   <variable name="CI_L3_SDrsClsLck" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors closed and locked in consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SDrsClsdLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors closed and locked on left side in consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SDrsClsdRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors closed and locked on right side in consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SCabDrsClsdLft1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab doors closed and locked on left side in consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SCabDrsClsdRgt1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab doors closed and locked on right side in consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SCabDrsClsdLft2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab doors closed and locked on left side in consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SCabDrsClsdRgt2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab doors closed and locked on right side in consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SCabSalDrCls1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab-saloon door closed cab 1]]></comment>
   </variable>
   <variable name="CI_L3_SCabSalDrCls2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab-saloon door closed cab 2]]></comment>
   </variable>
   <variable name="CI_L3_SDrsObstclDetCls" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[statusobastacles are detected  in consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SClsDrsLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[feedback command close door on left side in consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SClsDrsRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[feedback command close door on right side in consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SDiStp" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[feedback command disable steps in consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SDrsRlsdLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors released on left side in consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SDrsRlsdRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors released on right side in consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SDrsOpndLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors opened on left side in consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SDrsOpndRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors opened on right side in consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SEmAcsAct" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status emergency access is active in consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SEmEgrAct" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status emergency egress is active in consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SServKeyAct" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status service key is active is active in consist 3]]></comment>
   </variable>
   <variable name="CI_L4_SDrsClsLck" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors closed and locked in consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SDrsClsdLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors closed and locked on left side in consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SDrsClsdRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors closed and locked on right side in consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SCabDrsClsdLft1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab doors closed and locked on left side in consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SCabDrsClsdRgt1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab doors closed and locked on right side in consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SCabDrsClsdLft2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab doors closed and locked on left side in consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SCabDrsClsdRgt2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab doors closed and locked on right side in consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SCabSalDrCls1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab-saloon door closed cab 1]]></comment>
   </variable>
   <variable name="CI_L4_SCabSalDrCls2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status cab-saloon door closed cab 2]]></comment>
   </variable>
   <variable name="CI_L4_SDrsObstclDetCls" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[statusobastacles are detected  in consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SClsDrsLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[feedback command close door on left side in consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SClsDrsRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[feedback command close door on right side in consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SDiStp" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[feedback command disable steps in consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SDrsRlsdLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors released on left side in consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SDrsRlsdRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors released on right side in consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SDrsOpndLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors opened on left side in consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SDrsOpndRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status doors opened on right side in consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SEmAcsAct" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status emergency access is active in consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SEmEgrAct" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status emergency egress is active in consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SServKeyAct" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status service key is active is active in consist 4]]></comment>
   </variable>
   <variable name="C_VCCUOL1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Status In from Bus Consist 1 valid]]></comment>
   </variable>
   <variable name="C_VCCUOL2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Status In from Bus Consist 2 valid]]></comment>
   </variable>
   <variable name="C_VCCUOL3" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Status In from Bus Consist 3 valid]]></comment>
   </variable>
   <variable name="C_VCCUOL4" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Status In from Bus Consist 4 valid]]></comment>
   </variable>
   <variable name="CI_L1_SHwDrsClsLckCab1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status door HW interlock Cab1 consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SHwDrsClsLckCab2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status door HW interlock Cab 2 consist 1]]></comment>
   </variable>
   <variable name="CI_L2_SHwDrsClsLckCab1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status door HW interlock Cab1 consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SHwDrsClsLckCab2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status door HW interlock Cab 2 consist 2]]></comment>
   </variable>
   <variable name="CI_L3_SHwDrsClsLckCab1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status door HW interlock Cab1 consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SHwDrsClsLckCab2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status door HW interlock Cab 2 consist 3]]></comment>
   </variable>
   <variable name="CI_L4_SHwDrsClsLckCab1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status door HW interlock Cab1 consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SHwDrsClsLckCab2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status door HW interlock Cab 2 consist 4]]></comment>
   </variable>
   <variable name="CI_L1_SCndtMdLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status conductor mode active on left side consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SCndtMdRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status conductor mode active on right side consist 1]]></comment>
   </variable>
   <variable name="CI_L2_SCndtMdLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status conductor mode active on left side consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SCndtMdRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status conductor mode active on right side consist 2]]></comment>
   </variable>
   <variable name="CI_L3_SCndtMdLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status conductor mode active on left side consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SCndtMdRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status conductor mode active on right side consist 3]]></comment>
   </variable>
   <variable name="CI_L4_SCndtMdLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status conductor mode active on left side consist 3]]></comment>
   </variable>
   <variable name="CI_L4_SCndtMdRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status conductor mode active on right side consist 4]]></comment>
   </variable>
   <variable name="CI_L1_SDrgDtcdLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status drag detected on the left side consist 1]]></comment>
   </variable>
   <variable name="CI_L1_SDrgDtcdRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status drag detected on the right side consist 1]]></comment>
   </variable>
   <variable name="CI_L2_SDrgDtcdLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status drag detected on the left side consist 2]]></comment>
   </variable>
   <variable name="CI_L2_SDrgDtcdRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status drag detected on the right side consist 2]]></comment>
   </variable>
   <variable name="CI_L3_SDrgDtcdLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status drag detected on the left side consist 3]]></comment>
   </variable>
   <variable name="CI_L3_SDrgDtcdRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status drag detected on the right side consist 3]]></comment>
   </variable>
   <variable name="CI_L4_SDrgDtcdLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status drag detected on the left side consist 4]]></comment>
   </variable>
   <variable name="CI_L4_SDrgDtcdRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[status drag detected on the right side consist 4]]></comment>
   </variable>
   <variable name="CI_L1_SGrdPnlAct_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (DM1)]]></comment>
   </variable>
   <variable name="CI_L1_SGrdPnlAct_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (DM2)]]></comment>
   </variable>
   <variable name="CI_L1_SGrdPnlAct_3" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (PM)]]></comment>
   </variable>
   <variable name="CI_L1_SGrdPnlAct_4" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (PM)]]></comment>
   </variable>
   <variable name="CI_L1_SGrdPnlAct_5" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (PM)]]></comment>
   </variable>
   <variable name="CI_L2_SGrdPnlAct_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (DM1)]]></comment>
   </variable>
   <variable name="CI_L2_SGrdPnlAct_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (DM2)]]></comment>
   </variable>
   <variable name="CI_L2_SGrdPnlAct_3" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (PM)]]></comment>
   </variable>
   <variable name="CI_L2_SGrdPnlAct_4" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (PM)]]></comment>
   </variable>
   <variable name="CI_L2_SGrdPnlAct_5" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (PM)]]></comment>
   </variable>
   <variable name="CI_L3_SGrdPnlAct_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (DM1)]]></comment>
   </variable>
   <variable name="CI_L3_SGrdPnlAct_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (DM2)]]></comment>
   </variable>
   <variable name="CI_L3_SGrdPnlAct_3" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (PM)]]></comment>
   </variable>
   <variable name="CI_L3_SGrdPnlAct_4" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (PM)]]></comment>
   </variable>
   <variable name="CI_L3_SGrdPnlAct_5" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (PM)]]></comment>
   </variable>
   <variable name="CI_L4_SGrdPnlAct_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (DM1)]]></comment>
   </variable>
   <variable name="CI_L4_SGrdPnlAct_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (DM2)]]></comment>
   </variable>
   <variable name="CI_L4_SGrdPnlAct_3" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (PM)]]></comment>
   </variable>
   <variable name="CI_L4_SGrdPnlAct_4" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (PM)]]></comment>
   </variable>
   <variable name="CI_L4_SGrdPnlAct_5" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (PM)]]></comment>
   </variable>
   <variable name="CI_L1_SCrwPnlAct_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Crew Panel from DM]]></comment>
   </variable>
   <variable name="CI_L1_SCrwPnlAct_3" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Crew Panel from DTW]]></comment>
   </variable>
   <variable name="CI_L2_SCrwPnlAct_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Crew Panel from DM]]></comment>
   </variable>
   <variable name="CI_L2_SCrwPnlAct_3" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Crew Panel from DTW]]></comment>
   </variable>
   <variable name="CI_L3_SCrwPnlAct_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Crew Panel from DM]]></comment>
   </variable>
   <variable name="CI_L3_SCrwPnlAct_3" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Crew Panel from DTW]]></comment>
   </variable>
   <variable name="CI_L4_SCrwPnlAct_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Crew Panel from DM]]></comment>
   </variable>
   <variable name="CI_L4_SCrwPnlAct_3" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Crew Panel from DTW]]></comment>
   </variable>
   <variable name="CI_L1_CCrwPnlClsLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Command to close left doors from Crew Panel]]></comment>
   </variable>
   <variable name="CI_L2_CCrwPnlClsLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Command to close left doors from Crew Panel]]></comment>
   </variable>
   <variable name="CI_L3_CCrwPnlClsLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Command to close left doors from Crew Panel]]></comment>
   </variable>
   <variable name="CI_L4_CCrwPnlClsLft" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Command to close left doors from Crew Panel]]></comment>
   </variable>
   <variable name="CI_L1_CCrwPnlClsRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Command to close right doors from Crew Panel]]></comment>
   </variable>
   <variable name="CI_L2_CCrwPnlClsRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Command to close right doors from Crew Panel]]></comment>
   </variable>
   <variable name="CI_L3_CCrwPnlClsRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Command to close right doors from Crew Panel]]></comment>
   </variable>
   <variable name="CI_L4_CCrwPnlClsRgt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Command to close right doors from Crew Panel]]></comment>
   </variable>
   <variable name="CI_L1_SMntMdMC" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Maintenance Mode signal coming from consist 1]]></comment>
   </variable>
   <variable name="CI_L2_SMntMdMC" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Maintenance Mode signal coming from consist 2]]></comment>
   </variable>
   <variable name="CI_L3_SMntMdMC" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Maintenance Mode signal coming from consist 3]]></comment>
   </variable>
   <variable name="CI_L4_SMntMdMC" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Maintenance Mode signal coming from consist 4]]></comment>
   </variable>
  </variable-group>
  <variable-group name="Input - MIOs">
   <variable name="CI_MIO_SDrIntrlckRly1_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Traction Door Interlock Relay 1 Cab1]]></comment>
   </variable>
   <variable name="CI_MIO_SDrIntrlckRly1_1V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Traction Door Interlock Relay 1 Cab1 Valid]]></comment>
   </variable>
   <variable name="CI_MIO_SDrIntrlckRly2_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Traction Door Interlock Relay 2 Cab1]]></comment>
   </variable>
   <variable name="CI_MIO_SDrIntrlckRly2_1V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Traction Door Interlock Relay 2 Cab1 Valid]]></comment>
   </variable>
   <variable name="CI_MIO_SDrIntrlckRly1_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Traction Door Interlock Relay 1 Cab2]]></comment>
   </variable>
   <variable name="CI_MIO_SDrIntrlckRly1_2V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Traction Door Interlock Relay 1 Cab2 Valid]]></comment>
   </variable>
   <variable name="CI_MIO_SDrIntrlckRly2_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Traction Door Interlock Relay 2 Cab2]]></comment>
   </variable>
   <variable name="CI_MIO_SDrIntrlckRly2_2V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Traction Door Interlock Relay 2 Cab2 Valid]]></comment>
   </variable>
   <variable name="CI_MIO_SDrTrIntrlckIsl_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Interlock Bypass Cab1]]></comment>
   </variable>
   <variable name="CI_MIO_SDrTrIntrlckIsl_1V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Interlock Bypass Cab1 Valid]]></comment>
   </variable>
   <variable name="CI_MIO_SDrTrIntrlckIsl_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Interlock Bypass Cab2]]></comment>
   </variable>
   <variable name="CI_MIO_SDrTrIntrlckIsl_2V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Interlock Bypass Cab2Valid]]></comment>
   </variable>
   <variable name="CI_MIO_SDrTrIntrlck_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Traction Interlock Cab1]]></comment>
   </variable>
   <variable name="CI_MIO_SDrTrIntrlck_1V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Traction Interlock Cab1 valid]]></comment>
   </variable>
   <variable name="CI_MIO_SDrTrIntrlck_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Traction Interlock Cab2]]></comment>
   </variable>
   <variable name="CI_MIO_SDrTrIntrlck_2V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Traction Interlock Cab2 Valid]]></comment>
   </variable>
   <variable name="CI_MIO_SCabDrOpSw1A_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab 1 door side A switch 1]]></comment>
   </variable>
   <variable name="CI_MIO_SCabDrOpSw1A_1V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab 1 door side A switch 1 valid]]></comment>
   </variable>
   <variable name="CI_MIO_SCabDrOpSw2A_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab 1 door side A switch 2]]></comment>
   </variable>
   <variable name="CI_MIO_SCabDrOpSw2A_1V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab 1 door side A switch 2 valid]]></comment>
   </variable>
   <variable name="CI_MIO_SCabDrOpSw1B_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab 1 door side B switch 1]]></comment>
   </variable>
   <variable name="CI_MIO_SCabDrOpSw1B_1V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab 1 door side B switch 1 valid]]></comment>
   </variable>
   <variable name="CI_MIO_SCabDrOpSw2B_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab 1 door side B switch 2]]></comment>
   </variable>
   <variable name="CI_MIO_SCabDrOpSw2B_1V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab 1 door side B switch 2 valid]]></comment>
   </variable>
   <variable name="CI_MIO_SCabDrOpSw1A_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab 2 door side A switch 1]]></comment>
   </variable>
   <variable name="CI_MIO_SCabDrOpSw1A_2V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab 2 door side A switch 1 valid]]></comment>
   </variable>
   <variable name="CI_MIO_SCabDrOpSw2A_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab 2 door side A switch 2]]></comment>
   </variable>
   <variable name="CI_MIO_SCabDrOpSw2A_2V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab 2 door side A switch 2 valid]]></comment>
   </variable>
   <variable name="CI_MIO_SCabDrOpSw1B_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab 2 door side B switch 1]]></comment>
   </variable>
   <variable name="CI_MIO_SCabDrOpSw1B_2V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab 2 door side B switch 1 valid]]></comment>
   </variable>
   <variable name="CI_MIO_SCabDrOpSw2B_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab 2 door side B switch 2]]></comment>
   </variable>
   <variable name="CI_MIO_SCabDrOpSw2B_2V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab 2 door side B switch 2 valid]]></comment>
   </variable>
   <variable name="CI_MIO_SCabSalDrCl_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab - Saloon door closed Cab 1]]></comment>
   </variable>
   <variable name="CI_MIO_SCabSalDrCl_1V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab - Saloon door closed Cab 1 valid]]></comment>
   </variable>
   <variable name="CI_MIO_SCabSalDrCl_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab - Saloon door closed Cab 2]]></comment>
   </variable>
   <variable name="CI_MIO_SCabSalDrCl_2V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cab - Saloon door closed Cab 2 valid]]></comment>
   </variable>
   <variable name="CI_MIO_SDrClPbRgt_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door close pushbuttons Right cab 1]]></comment>
   </variable>
   <variable name="CI_MIO_SDrClPbRgt_1V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door close pushbuttons Right cab 1  valid bit]]></comment>
   </variable>
   <variable name="CI_MIO_SDrClPbRgt_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door close pushbuttons Right cab 2]]></comment>
   </variable>
   <variable name="CI_MIO_SDrClPbRgt_2V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door close pushbuttons Right cab 2 valid bit]]></comment>
   </variable>
   <variable name="CI_MIO_SDrClPbLft_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door close pushbuttons Left cab 1]]></comment>
   </variable>
   <variable name="CI_MIO_SDrClPbLft_1V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door close pushbuttons Left cab 1  valid bit]]></comment>
   </variable>
   <variable name="CI_MIO_SDrClPbLft_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door close pushbuttons Left cab 2]]></comment>
   </variable>
   <variable name="CI_MIO_SDrClPbLft_2V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door close pushbuttons Left cab 2 valid bit]]></comment>
   </variable>
   <variable name="CI_MIO_SDrClPbLft2_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door close pushbuttons Left cab 1 (CabSide Wall)]]></comment>
   </variable>
   <variable name="CI_MIO_SDrClPbLft2_1V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door close pushbuttons Left cab 1 (CabSide Wall) valid bit]]></comment>
   </variable>
   <variable name="CI_MIO_SDrClPbRgt2_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door close pushbuttons Right cab 2 (CabSide Wall)]]></comment>
   </variable>
   <variable name="CI_MIO_SDrClPbRgt2_1V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door close pushbuttons Right cab 2 (CabSide Wall) valid bit]]></comment>
   </variable>
   <variable name="CI_MIO_SDrClPbLft2_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door close pushbuttons Left cab 1 (CabSide Wall)]]></comment>
   </variable>
   <variable name="CI_MIO_SDrClPbLft2_2V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door close pushbuttons Left cab 1 (CabSide Wall) valid bit]]></comment>
   </variable>
   <variable name="CI_MIO_SDrClPbRgt2_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door close pushbuttons Right cab 2 (CabSide Wall)]]></comment>
   </variable>
   <variable name="CI_MIO_SDrClPbRgt2_2V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Door close pushbuttons Right cab 2 (CabSide Wall) valid bit]]></comment>
   </variable>
   <variable name="CI_MIO_SDrRelPbRgt1_1" array-size="1" type="MWT_BOOL" usage="input"/>
   <variable name="CI_MIO_SDrRelPbLft1_1" array-size="1" type="MWT_BOOL" usage="input"/>
   <variable name="CI_MIO_SDrRelPbLft1_1V" array-size="1" type="MWT_BOOL" usage="input"/>
   <variable name="CI_MIO_SDrRelPbRgt1_1V" array-size="1" type="MWT_BOOL" usage="input"/>
   <variable name="CI_MIO_SDrRelPbRgt1_2" array-size="1" type="MWT_BOOL" usage="input"/>
   <variable name="CI_MIO_SDrRelPbLft1_2" array-size="1" type="MWT_BOOL" usage="input"/>
   <variable name="CI_MIO_SDrRelPbRgt1_2V" array-size="1" type="MWT_BOOL" usage="input"/>
   <variable name="CI_MIO_SDrRelPbLft1_2V" array-size="1" type="MWT_BOOL" usage="input"/>
   <variable name="CI_MIO_SFltAlmAck_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Alarm Acknowledgement - CSDE Wrong side in cab1]]></comment>
   </variable>
   <variable name="CI_MIO_SFltAlmAck_1V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Validity - Alarm Acknowledgement - CSDE Wrong side in cab1]]></comment>
   </variable>
   <variable name="CI_MIO_SFltAlmAck_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Alarm Acknowledgement - CSDE Wrong side in cab2]]></comment>
   </variable>
   <variable name="CI_MIO_SFltAlmAck_2V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Validity - Alarm Acknowledgement - CSDE Wrong side in cab2]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwPnlAct_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (DM1)]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwPnlAct_1V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (DM1) validity]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwPnlAct_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (DM2)]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwPnlAct_2V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (DM2) validity]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwPnlAct_3" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (PMLW)]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwPnlAct_3V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (PMLW) validity]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwPnlAct_4" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (M1L)]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwPnlAct_4V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (M1L) validity]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwPnlAct_5" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (M2L)]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwPnlAct_5V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Guard's vestibule panel active (M2L) validity]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbRgt_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all right doors pushbutton active car DM1]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbRgt_1V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all right doors pushbutton active car DM1 validity]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbLft_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car DM1]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbLft_1V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car DM1 validity]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbRgt_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all right doors pushbutton active car DM2]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbRgt_2V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all right doors pushbutton active car DM2 validity]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbLft_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car DM2]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbLft_2V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car DM2 validity]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbRgt_3" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all right doors pushbutton active car PMLW]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbRgt_3V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all right doors pushbutton active car PMLW validity]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbLft_3" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car PMLW]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbLft_3V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car PMLWvalidity]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbRgt_4" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all right doors pushbutton active car M1L]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbRgt_4V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all right doors pushbutton active car M1L validity]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbLft_4" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car M1L]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbLft_4V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car M1L validity]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbRgt_5" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all right doors pushbutton active car M2L]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbRgt_5V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all right doors pushbutton active car M2L validity]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbLft_5" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car M2L]]></comment>
   </variable>
   <variable name="CI_MIO_SSalCrwDrClPbLft_5V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car M2L validity]]></comment>
   </variable>
   <variable name="CI_MIO_SCrwPnlAct_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car M2L validity]]></comment>
   </variable>
   <variable name="CI_MIO_SCrwPnlAct_1V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car M2L validity]]></comment>
   </variable>
   <variable name="CI_MIO_SCrwPnlAct_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car M2L validity]]></comment>
   </variable>
   <variable name="CI_MIO_SCrwPnlAct_2V" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car M2L validity]]></comment>
   </variable>
   <variable name="CI_MIO_SSnstvEdgDeact_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Drag Detection Feedback is active on Cab 1 (Sensitive edge deactivated)]]></comment>
   </variable>
   <variable name="CI_MIO_SSnstvEdgDeact_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Drag Detection Feedback is active on Cab 2 (Sensitive edge deactivated)]]></comment>
   </variable>
   <variable name="CI_MIO_SEmBrRly_1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Release EB Signal 1 (Emergency brake relay energised)]]></comment>
   </variable>
   <variable name="CI_MIO_SEmBrRly_2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Release EB Signal 2 (Emergency brake relay energised)]]></comment>
   </variable>
   <variable name="CI_DCUA1_SSdoEnFb" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[ASDO Enable HW Feedback car 1 door A]]></comment>
   </variable>
   <variable name="CI_DCUF1_SSdoEnFb" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[ASDO Enable HW Feedback car 1 door F]]></comment>
   </variable>
   <variable name="CI_DCUA3_SSdoEnFb" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[ASDO Enable HW Feedback car 2 door A]]></comment>
   </variable>
   <variable name="CI_DCUF3_SSdoEnFb" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[ASDO Enable HW Feedback car 2 door F]]></comment>
   </variable>
  </variable-group>
  <variable-group name="Input - HMI">
   <variable name="CI_HMI_STrnClrMd" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[train clearence mode]]></comment>
   </variable>
   <variable name="CI_HMI_ASfEvt" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Alarm acknowledgement (CSDE wrong side)]]></comment>
   </variable>
   <variable name="CI_HMI_SDrOp" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Driver sends an open command to all doors on the train from active cab]]></comment>
   </variable>
   <variable name="C_VHMICtrlMs" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Validity bit for iHMISCtrlMs telegram (Door open request)]]></comment>
   </variable>
   <variable name="CI_HMI_XDrCcl" array-size="1" type="MWT_UDINT" usage="input" init="0">
    <comment><![CDATA[Number of door cycles.]]></comment>
   </variable>
   <variable name="CI_HMI_SDrCclPb" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Door cycle pushbutton]]></comment>
   </variable>
   <variable name="CI_HMI_SDrCclPausePb" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Door cycling pause pushbutton.]]></comment>
   </variable>
   <variable name="CI_HMI_SDrCclAbortPb" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Door cycling abort pushbutton.]]></comment>
   </variable>
   <variable name="CI_HMI_SDrCclEnAllPb" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Door Cycle Enable "All" pushbutton.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar1DrCclA" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar1DrCclC" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar1DrCclD" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar1DrCclF" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar2DrCclA" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar2DrCclC" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar2DrCclD" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar2DrCclF" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar3DrCclA" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar3DrCclC" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar3DrCclD" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar3DrCclF" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar4DrCclA" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar4DrCclC" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar4DrCclD" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar4DrCclF" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar5DrCclA" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar5DrCclC" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar5DrCclD" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
   <variable name="CI_HMI_SCar5DrCclF" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cycling test, DCUA ... DCUF.]]></comment>
   </variable>
  </variable-group>
  <variable-group name="Input - CCUS">
   <variable name="CI_CCUS_SAsdoIslV" array-size="1" type="MWT_UINT" usage="input">
    <comment><![CDATA[Validity: ASDO Isolated Active]]></comment>
   </variable>
   <variable name="CI_CCUS_SCar1DrSdoEnAF" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Doors A&F in Car 1 ASDO Enable pattern]]></comment>
   </variable>
   <variable name="CI_CCUS_SCar1DrSdoEnCD" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Doors C&D in Car 1 ASDO Enable pattern]]></comment>
   </variable>
   <variable name="CI_CCUS_SCar2DrSdoEnAF" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Doors A&F in Car 2 ASDO Enable pattern]]></comment>
   </variable>
   <variable name="CI_CCUS_SCar2DrSdoEnCD" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Doors C&D in Car 2 ASDO Enable pattern]]></comment>
   </variable>
   <variable name="CI_CCUS_SCar3DrSdoEnAF" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Doors A&F in Car 3 ASDO Enable pattern]]></comment>
   </variable>
   <variable name="CI_CCUS_SCar3DrSdoEnCD" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Doors C&D in Car 3 ASDO Enable pattern]]></comment>
   </variable>
   <variable name="CI_CCUS_SCar4DrSdoEnAF" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Doors A&F in Car 4 ASDO Enable pattern]]></comment>
   </variable>
   <variable name="CI_CCUS_SCar4DrSdoEnCD" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Doors C&D in Car 4 ASDO Enable pattern]]></comment>
   </variable>
   <variable name="CI_CCUS_SCar5DrSdoEnAF" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Doors A&F in Car 5 ASDO Enable pattern]]></comment>
   </variable>
   <variable name="CI_CCUS_SCar5DrSdoEnCD" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Doors C&D in Car 5 ASDO Enable pattern]]></comment>
   </variable>
   <variable name="CI_CCUS_SSdoByp" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[ASDO SW bypass]]></comment>
   </variable>
   <variable name="CI_CCUS_SCsdePtfmLft" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[CSDE data - RFID platform left]]></comment>
   </variable>
   <variable name="CI_CCUS_SCsdePtfmRgt" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[CSDE data - RFID platform right]]></comment>
   </variable>
   <variable name="CI_CCUS_SCsdeTagRead" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[CSDE data - RFID tag data available]]></comment>
   </variable>
   <variable name="CI_CCUS_SCsdeTagExpected" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[CSDE data - RFID tag is expected]]></comment>
   </variable>
   <variable name="CI_CCUS_SCsdeV" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Validity bit for CSDE informations]]></comment>
   </variable>
   <variable name="CI_CCUS_SSwLoSpd" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[low speed status signal]]></comment>
   </variable>
   <variable name="CI_CCUS_SPIBSFlt" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Status: PIBS Fault]]></comment>
   </variable>
   <variable name="CI_CCUS_SLocConfirmed" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[Location confirmed]]></comment>
   </variable>
   <variable name="CI_CCUS_SPibsIsl" array-size="1" type="MWT_BOOL" usage="input" init="FALSE">
    <comment><![CDATA[PIBS is isolated]]></comment>
   </variable>
   <variable name="CI_CCUS_XTotDistTrp" array-size="1" type="MWT_UDINT" usage="input">
    <comment><![CDATA[Total Distance from trip]]></comment>
   </variable>
   <variable name="CI_CCUS_SXCabStTrn" array-size="1" type="MWT_USINT" usage="input" init="0">
    <comment><![CDATA[Cab Status from CCUS, value translates to which cab is active]]></comment>
   </variable>
   <variable name="CI_CCUS_SAsdoOvrdAvl" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[ASDO override available (The Automatic Selective Door Operation (ASDO) System has detected that data is missing.)]]></comment>
   </variable>
   <variable name="CI_CCUS_SCar1DrSdoEnAFRed" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[ASDO Enable Request Red car 1 doors A and F]]></comment>
   </variable>
   <variable name="CI_CCUS_SCar3DrSdoEnAFRed" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[ASDO Enable Request Red car 3 doors A and F]]></comment>
   </variable>
   <variable name="CI_CCUS_SCar1DrSdoEnAFSaf" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[ASDO Enable Request Safe car 1 doors A and F]]></comment>
   </variable>
   <variable name="CI_CCUS_SCar3DrSdoEnAFSaf" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[ASDO Enable Request Safe car 3 doors A and F]]></comment>
   </variable>
   <variable name="CI_CCUS_SCar1DrSdoEnAFRedSaf" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[ASDO Enable Request Red Safe car 1 doors A and F]]></comment>
   </variable>
   <variable name="CI_CCUS_SSASDOSafeTestSt" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[ASDO Safe Test command]]></comment>
   </variable>
   <variable name="CI_CCUS_SSASDOSafeTestResultSt" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[ASDO Safe Test End Status]]></comment>
   </variable>
   <variable name="CI_CCUS_SCar3DrSdoEnAFRedSaf" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[ASDO Enable Request Red Safe car 3 doors A and F]]></comment>
   </variable>
   <variable name="CI_CCUS_XOwnCst" array-size="1" type="MWT_USINT" usage="input">
    <comment><![CDATA[Own consist Entry coming  from CCUS]]></comment>
   </variable>
   <variable name="CI_CCUS_SDrgDetNotAct1" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Drag detection not active in cab 1]]></comment>
   </variable>
   <variable name="CI_CCUS_SDrgDetNotAct2" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Drag detection not active in cab 2]]></comment>
   </variable>
   <variable name="CI_CCUS_EMissDoor" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[CCUS: TCMS has detected that not all expected doors have been determined within the train]]></comment>
   </variable>
   <variable name="CI_CCUS_EDuplDoor" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[CCUS: TCMS has detected a mismatch between the doors in different Consists (two consist have calculated that they have the same doors).]]></comment>
   </variable>
   <variable name="CI_CCUS_ZNxtStnRelPttrn1" array-size="1" type="MWT_UDINT" usage="input">
    <comment><![CDATA[CCUS: Next Station Release Pattern most significant bits]]></comment>
   </variable>
   <variable name="CI_CCUS_ZNxtStnRelPttrn2" array-size="1" type="MWT_UDINT" usage="input">
    <comment><![CDATA[CCUS: Next Station Release Pattern least significant bits]]></comment>
   </variable>
  </variable-group>
  <variable-group name="Input - CCUC">
   <variable name="CI_CCUC_SPosOnSegment" array-size="1" type="MWT_USINT" usage="input" init="0">
    <comment><![CDATA[Train at(1)/after(2)/before station(3)]]></comment>
   </variable>
  </variable-group>
  <variable-group name="Input -TDR">
   <variable name="CI_TDR_SDiDrRelSideA" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[TDR TW Feedback - Door Release Side A]]></comment>
   </variable>
   <variable name="CI_TDR_SDiDrRelSideB" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[TDR TW Feedback - Door Release Side B]]></comment>
   </variable>
   <variable name="CI_TDR_SDiDrClSideA" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[TDR TW Feedback - Door Close Side A]]></comment>
   </variable>
   <variable name="CI_TDR_SDiDrClSideB" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[TDR TW Feedback - Door Close Side B]]></comment>
   </variable>
   <variable name="C_VTDR" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[TDR valid]]></comment>
   </variable>
   <variable name="CI_TDR_SDoColdMvmnt" array-size="1" type="MWT_BOOL" usage="input">
    <comment><![CDATA[Cold movement detected]]></comment>
   </variable>
  </variable-group>
  <variable-group name="Output to family- UserIf">
   <variable name="PAD_RClDrsA01" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Request to close A-side doors  from cab 1]]></comment>
   </variable>
   <variable name="PAD_RClDrsA01V" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Validity Signal for request to close A-side doors  from cab 1]]></comment>
   </variable>
   <variable name="PAD_RClDrsB01" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Request to close B-side doors  from cab 1]]></comment>
   </variable>
   <variable name="PAD_RClDrsB01V" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Validity Signal for request to close B-side doors  from cab 1]]></comment>
   </variable>
   <variable name="PAD_RClDrsA02" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Request to close A-side doors from cab 2]]></comment>
   </variable>
   <variable name="PAD_RClDrsA02V" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Validity Signal for request to close A-side doors from cab 2]]></comment>
   </variable>
   <variable name="PAD_RClDrsB02" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Request to close B-side doors  from cab 2]]></comment>
   </variable>
   <variable name="PAD_RClDrsB02V" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Validity Signal for request to close B-side doors  from cab 2]]></comment>
   </variable>
   <variable name="PAD_RClDrsASd01" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Door close pushbuttons A side cab 1 (CabSide Wall)]]></comment>
   </variable>
   <variable name="PAD_RClDrsASd01V" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Door close pushbuttons A side cab 1 (CabSide Wall) valid bit]]></comment>
   </variable>
   <variable name="PAD_RClDrsBSd01" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Door close pushbuttons B side cab 1 (CabSide Wall)]]></comment>
   </variable>
   <variable name="PAD_RClDrsBSd01V" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Door close pushbuttons B side cab 1 (CabSide Wall) valid bit]]></comment>
   </variable>
   <variable name="PAD_RClDrsBSd02" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Door close pushbuttons B side cab 2 (CabSide Wall)]]></comment>
   </variable>
   <variable name="PAD_RClDrsBSd02V" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Door close pushbuttons B side cab 2 (CabSide Wall) valid bit]]></comment>
   </variable>
   <variable name="PAD_RClDrsASd02" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Door close pushbuttons A side cab 2 (CabSide Wall)]]></comment>
   </variable>
   <variable name="PAD_RClDrsASd02V" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Door close pushbuttons A side cab 2 (CabSide Wall) valid bit]]></comment>
   </variable>
   <variable name="PAD_ROpDrs01" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Request to open doors  from cab 1]]></comment>
   </variable>
   <variable name="PAD_ROpDrs01V" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Validity Signal for request to open doors  from cab 1]]></comment>
   </variable>
   <variable name="PAD_ROpDrs02" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Request to open doors from cab 2]]></comment>
   </variable>
   <variable name="PAD_ROpDrs02V" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Validity Signal for request to open doors from cab 2]]></comment>
   </variable>
   <variable name="PAD_RSideA01" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Request to select A-side for release & open doors from cab 1]]></comment>
   </variable>
   <variable name="PAD_RSideA01V" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Validity Signal for request to select A-side for release & open doors  from cab 1]]></comment>
   </variable>
   <variable name="PAD_RSideB01" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Request to select B-side for release & open doors  from cab 1]]></comment>
   </variable>
   <variable name="PAD_RSideB01V" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Validity Signal for request to select B- side for release & open doors  from cab 1]]></comment>
   </variable>
   <variable name="PAD_RRlsDrs01" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Request to release doors  from cab 1]]></comment>
   </variable>
   <variable name="PAD_RRlsDrs01V" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Validity Signal for request to release doors  from cab 1]]></comment>
   </variable>
   <variable name="PAD_RSideA02" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Request to select A-side for release & open doors  from cab 2]]></comment>
   </variable>
   <variable name="PAD_RSideA02V" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Validity Signal for request to select A-side for release & open doors from cab 2]]></comment>
   </variable>
   <variable name="PAD_RSideB02" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Request to select B-side for release & open doors from cab 2]]></comment>
   </variable>
   <variable name="PAD_RSideB02V" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Validity Signal for request to select B-side for release & open doors from cab 2]]></comment>
   </variable>
   <variable name="PAD_RRlsDrs02" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Request to release doors from cab 2]]></comment>
   </variable>
   <variable name="PAD_RRlsDrs02V" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[Validity Signal forRequest to release doors from cab 2]]></comment>
   </variable>
   <variable name="PAD_PCabCpldNeeded" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[(LOT) "Cab coupled" condition is used to set the enable release signals]]></comment>
   </variable>
   <variable name="PAD_PGrdPnlUsd" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[(SWR) "Guard Panel" condition is used to set the enable release signals]]></comment>
   </variable>
   <variable name="PAD_GrdOnlyMd" array-size="1" type="MWT_BOOL" usage="output"/>
   <variable name="PAD_SGrdPnlAct_01_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst1 vestibule panel active (DTLW)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_01_2" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst1 vestibule panel active (M2)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_01_3" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst1 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_01_4" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst1 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_01_5" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst1 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_02_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst2 vestibule panel active (DTLW)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_02_2" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst2 vestibule panel active (M2)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_02_3" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst2 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_02_4" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst2 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_02_5" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst2 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_03_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst3 vestibule panel active (DTLW)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_03_2" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst3 vestibule panel active (M2)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_03_3" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst3 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_03_4" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst3 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_03_5" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst3 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_04_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst4 vestibule panel active (DTLW)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_04_2" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst4 vestibule panel active (DM2)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_04_3" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst4 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_04_4" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst4 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_SGrdPnlAct_04_5" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Guard's cst4 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_SCrwPnlAct_01_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Crew Panel cst1 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_SCrwPnlAct_01_3" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Crew Panel cst1 vestibule panel active (DTLW)]]></comment>
   </variable>
   <variable name="PAD_SCrwPnlAct_02_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Crew Panel cst2 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_SCrwPnlAct_02_3" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Crew Panel cst2 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_SCrwPnlAct_03_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Crew Panel cst2 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_SCrwPnlAct_03_3" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Crew Panel cst3 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_SCrwPnlAct_04_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Crew Panel cst3 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_SCrwPnlAct_04_3" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Crew Panel cst4 vestibule panel active (DM)]]></comment>
   </variable>
   <variable name="PAD_CPnlDrClLft" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Command to left door close from crew panel]]></comment>
   </variable>
   <variable name="PAD_CPnlDrClRgt" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Command to left door close from crew panel]]></comment>
   </variable>
   <variable name="PAD_RTrnClDrsRgt" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Trainwide request to close doors on the right side of the train]]></comment>
   </variable>
   <variable name="PAD_RTrnClDrsLft" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Trainwide request to close doors on the Left side of the train]]></comment>
   </variable>
   <variable name="PAD_SPk44Conflict" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[PK44 Conflict]]></comment>
   </variable>
   <variable name="PAD_SPk44PltfrmLft" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[PK44 Platform side left]]></comment>
   </variable>
   <variable name="PAD_SPk44PltfrmRgt" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[PK44 Platform side right]]></comment>
   </variable>
   <variable name="PAD_SPk44DataRcvd" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[PK44 Data received]]></comment>
   </variable>
   <variable name="PAD_SPk44DataStrd" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[PK44 Data stored]]></comment>
   </variable>
   <variable name="PAD_SPk44Expected" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[PK44 Expected]]></comment>
   </variable>
   <variable name="PAD_PPk44SideSelProj" array-size="1" type="MWT_BYTE" usage="output">
    <comment><![CDATA[Parameter to allow PK44 side selection in SWR. For SWR value - 251, For other projects Value- 63]]></comment>
   </variable>
  </variable-group>
  <variable-group name="Output to family - Train">
   <variable name="PAD_StatusFromBus_01" array-size="1" type="PadGDrsStatusGwIn" usage="output">
    <comment><![CDATA[Status information to train bus from node 01]]></comment>
   </variable>
   <variable name="PAD_StatusFromBus_02" array-size="1" type="PadGDrsStatusGwIn" usage="output">
    <comment><![CDATA[Status information to train bus from node 02]]></comment>
   </variable>
   <variable name="PAD_StatusFromBus_03" array-size="1" type="PadGDrsStatusGwIn" usage="output">
    <comment><![CDATA[Status information to train bus from node 03]]></comment>
   </variable>
   <variable name="PAD_StatusFromBus_04" array-size="1" type="PadGDrsStatusGwIn" usage="output">
    <comment><![CDATA[Status information to train bus from node 04]]></comment>
   </variable>
   <variable name="PAD_CmdFromBus" array-size="1" type="PadGDrsCmdGwIn" usage="output">
    <comment><![CDATA[Commands to be received from train bus in the consist]]></comment>
   </variable>
  </variable-group>
  <variable-group name="Output to generic - from other FA">
   <variable name="TC_CabActive" array-size="1" type="TcCabActivationData" usage="output">
    <comment><![CDATA[cab activation data from TC]]></comment>
   </variable>
   <variable name="TC_MyConsist" array-size="1" type="TcMyConsist" usage="output">
    <comment><![CDATA[structure with datas for my consist from TC]]></comment>
   </variable>
   <variable name="TC_TrainConfig" array-size="1" type="TcTrainConfig" usage="output">
    <comment><![CDATA[structure with datas from train configuration]]></comment>
   </variable>
   <variable name="DCM_CstState" array-size="1" type="DcmCstState" usage="output">
    <comment><![CDATA[contain train relevant information like train speed, still stand and so on.]]></comment>
   </variable>
   <variable name="TC_SubOpMode" array-size="1" type="TcSubOpMode" usage="output">
    <comment><![CDATA[structure with datas about sub opmodes]]></comment>
   </variable>
   <variable name="SCTR_SysInit" array-size="1" type="SctrSystemInit" usage="output">
    <comment><![CDATA[system init information]]></comment>
   </variable>
   <variable name="PIS_STrnAtStn" array-size="1" type="MWT_BOOL" usage="output" init="FALSE">
    <comment><![CDATA[train is at station from PIS on CCU-C]]></comment>
   </variable>
   <variable name="AC_STrnFireDtc" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Fire detected in the train (need to be available in all consists)]]></comment>
   </variable>
  </variable-group>
  <variable-group name="Output - project extension">
   <variable name="PAD_CarIn01" array-size="1" type="PadFCarIn" usage="output">
    <comment><![CDATA[Family : Consist : All data related to a car1 from other HLFG as Input.]]></comment>
   </variable>
   <variable name="PAD_CarIn02" array-size="1" type="PadFCarIn" usage="output">
    <comment><![CDATA[Family : Consist : All data related to a car2 from other HLFG as Input.]]></comment>
   </variable>
   <variable name="PAD_CarIn03" array-size="1" type="PadFCarIn" usage="output">
    <comment><![CDATA[Family : Consist : All data related to a car3 from other HLFG as Input.]]></comment>
   </variable>
   <variable name="PAD_CarIn04" array-size="1" type="PadFCarIn" usage="output">
    <comment><![CDATA[Family : Consist : All data related to a car4 from other HLFG as Input.]]></comment>
   </variable>
   <variable name="PAD_CarIn05" array-size="1" type="PadFCarIn" usage="output">
    <comment><![CDATA[Family : Consist : All data related to a car5 from other HLFG as Input.]]></comment>
   </variable>
   <variable name="PAD_HwDoorLoop" array-size="1" type="PadGCstDoorLoopHw" usage="output">
    <comment><![CDATA[Family : HW-Interlock Signals]]></comment>
   </variable>
   <variable name="PAD_SdoByPass" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Family : ASDO bypass]]></comment>
   </variable>
   <variable name="PAD_SdoByPassV" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Family : validity for ASDO bypass]]></comment>
   </variable>
   <variable name="PAD_CsdeData" array-size="1" type="PadFCsde" usage="output">
    <comment><![CDATA[Family : CSDE data]]></comment>
   </variable>
   <variable name="PAD_RCsdeAlmAck" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Family : CSDE wrong side alarm acknowledgment]]></comment>
   </variable>
   <variable name="PAD_SDrTrmMdPrsdHMI" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Terminal Station Mode Button Pressed from HMI]]></comment>
   </variable>
   <variable name="PAD_PTClearTrnCl" array-size="1" type="MWT_TIME" usage="output">
    <comment><![CDATA[Clear train closing time parameter]]></comment>
   </variable>
   <variable name="PAD_CCrewSwitchAct" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Crew switch active (0: active, 1: not active)]]></comment>
   </variable>
   <variable name="PAD_SDrTrmMdCst" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Terminal Station Mode Active in consist]]></comment>
   </variable>
   <variable name="PAD_Dcu_ZOp_01" array-size="1" type="MWT_USINT" usage="output">
    <comment><![CDATA[Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)]]></comment>
   </variable>
   <variable name="PAD_Dcu_ZOp_02" array-size="1" type="MWT_USINT" usage="output">
    <comment><![CDATA[Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)]]></comment>
   </variable>
   <variable name="PAD_Dcu_ZOp_03" array-size="1" type="MWT_USINT" usage="output">
    <comment><![CDATA[Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)]]></comment>
   </variable>
   <variable name="PAD_Dcu_ZOp_04" array-size="1" type="MWT_USINT" usage="output">
    <comment><![CDATA[Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)]]></comment>
   </variable>
   <variable name="PAD_Dcu_ZOp_05" array-size="1" type="MWT_USINT" usage="output">
    <comment><![CDATA[Door Open; Global open command to all doors to open when the door is released and not open. This signal is from the TCMS HMI Open Button not from the hardware open buttons.; Default : 0;                           (pulsed)]]></comment>
   </variable>
   <variable name="PAD_Dcu_ZCl_01" array-size="1" type="MWT_USINT" usage="output">
    <comment><![CDATA[Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)]]></comment>
   </variable>
   <variable name="PAD_Dcu_ZCl_02" array-size="1" type="MWT_USINT" usage="output">
    <comment><![CDATA[Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)]]></comment>
   </variable>
   <variable name="PAD_Dcu_ZCl_03" array-size="1" type="MWT_USINT" usage="output">
    <comment><![CDATA[Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)]]></comment>
   </variable>
   <variable name="PAD_Dcu_ZCl_04" array-size="1" type="MWT_USINT" usage="output">
    <comment><![CDATA[Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)]]></comment>
   </variable>
   <variable name="PAD_Dcu_ZCl_05" array-size="1" type="MWT_USINT" usage="output">
    <comment><![CDATA[Close Door; Tells the door to close and lock and remove release.; Default : 0,                <decode>;                           (pulsed)]]></comment>
   </variable>
   <variable name="PAD_PCarExists" array-size="1" type="MWT_WORD" usage="output">
    <comment><![CDATA[indicates which cars exits in consist]]></comment>
   </variable>
   <variable name="PAD_SDiDrRelSideA" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[TDR TW Feedback - Door Release Side A]]></comment>
   </variable>
   <variable name="PAD_SDiDrRelSideB" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[TDR TW Feedback - Door Release Side B]]></comment>
   </variable>
   <variable name="PAD_SDiDrClSideA" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[TDR TW Feedback - Door Close Side A]]></comment>
   </variable>
   <variable name="PAD_SDiDrClSideB" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[TDR TW Feedback - Door Close Side B]]></comment>
   </variable>
   <variable name="PAD_STdrV" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[TDR valid]]></comment>
   </variable>
   <variable name="PAD_SSalCrwPnlAct_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Saloon crew panel active in car DM1 - internal]]></comment>
   </variable>
   <variable name="PAD_SSalCrwPnlAct_2" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Saloon crew panel active in car PMWL - internal]]></comment>
   </variable>
   <variable name="PAD_SSalCrwPnlAct_5" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Saloon crew panel active in car M2L - internal]]></comment>
   </variable>
   <variable name="PAD_SSalCrwPnlAct_4" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Saloon crew panel active in car M1L - internal]]></comment>
   </variable>
   <variable name="PAD_SSalCrwPnlAct_3" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Saloon crew panel active in car DM2- internal]]></comment>
   </variable>
   <variable name="PAD_SCrwPnlAct_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Crew PAnel cab 1]]></comment>
   </variable>
   <variable name="PAD_SCrwPnlAct_3" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Cre Panel cab 2]]></comment>
   </variable>
   <variable name="PAD_SLocConfirmed" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Family : Location Confirmed]]></comment>
   </variable>
   <variable name="PAD_XTotDistTrp" array-size="1" type="MWT_UDINT" usage="output">
    <comment><![CDATA[Total ditance from trip]]></comment>
   </variable>
   <variable name="PAD_SColdMvmnt" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Cold movement detected]]></comment>
   </variable>
   <variable name="PAD_CSideLft" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Command to close doors left]]></comment>
   </variable>
   <variable name="PAD_CSideRgt" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Command to close doors right]]></comment>
   </variable>
   <variable name="PAD_SPibsIsolated" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Family : PIBS is isolated]]></comment>
   </variable>
   <variable name="PAD_REndAsdoSafeTest" array-size="1" type="MWT_USINT" usage="output">
    <comment><![CDATA[ASDO Safe Test end Status]]></comment>
   </variable>
   <variable name="PAD_SAsdoOvrdAvl" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[ASDO override available (The Automatic Selective Door Operation (ASDO) System has detected that data is missing.)]]></comment>
   </variable>
   <variable name="PAD_RAsdoSafeTest" array-size="1" type="MWT_USINT" usage="output">
    <comment><![CDATA[ADSO Safe test request (ASDO safe test request is TRUE when this is equal to 23)]]></comment>
   </variable>
   <variable name="PAD_RAsdoEnRedAF_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[ASDO Enable Request Red car 1 doors A and F]]></comment>
   </variable>
   <variable name="PAD_RAsdoEnRedAF_3" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[ASDO Enable Request Red car 3 doors A and F]]></comment>
   </variable>
   <variable name="PAD_RAsdoEnSafeAF_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[ASDO Enable Request Safe car 1 doors A and F]]></comment>
   </variable>
   <variable name="PAD_RAsdoEnSafeAF_3" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[ASDO Enable Request Safe car 3 doors A and F]]></comment>
   </variable>
   <variable name="PAD_RAsdoEnRedSafeAF_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[ASDO Enable Request Red Safe car 1 doors A and F]]></comment>
   </variable>
   <variable name="PAD_RAsdoEnRedSafeAF_3" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[ASDO Enable Request Red Safe car 3 doors A and F]]></comment>
   </variable>
   <variable name="PAD_RAsdoEnAF_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[ASDO Enable Request car 1 doors A and F]]></comment>
   </variable>
   <variable name="PAD_RAsdoEnAF_3" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[ASDO Enable Request car 3 doors A and F]]></comment>
   </variable>
   <variable name="PAD_DcuEnHwFbA_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[ASDO Enable HW Feedback car 1 door A]]></comment>
   </variable>
   <variable name="PAD_DcuEnHwFbF_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[ASDO Enable HW Feedback car 1 door F]]></comment>
   </variable>
   <variable name="PAD_DcuEnHwFbA_3" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[ASDO Enable HW Feedback car 3 door A]]></comment>
   </variable>
   <variable name="PAD_DcuEnHwFbF_3" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[ASDO Enable HW Feedback car 3 door F]]></comment>
   </variable>
   <variable name="PAD_XOwnCst" array-size="1" type="MWT_USINT" usage="output">
    <comment><![CDATA[Own consist Entry]]></comment>
   </variable>
   <variable name="PAD_SDrgDetNotAct1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Drag detection not active in cab 1]]></comment>
   </variable>
   <variable name="PAD_SDrgDetNotAct2" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Drag detection not active in cab 2]]></comment>
   </variable>
   <variable name="PAD_SSnstvEdgDeact_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Drag Detection Feedback is active on Cab 1 (Sensitive edge deactivated)]]></comment>
   </variable>
   <variable name="PAD_SSnstvEdgDeact_2" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Drag Detection Feedback is active on Cab 2 (Sensitive edge deactivated)]]></comment>
   </variable>
   <variable name="PAD_SEmBrRly_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Release EB Signal 1 (Emergency brake relay energised)]]></comment>
   </variable>
   <variable name="PAD_SEmBrRly_2" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Release EB Signal 2 (Emergency brake relay energised)]]></comment>
   </variable>
   <variable name="PAD_SMissDoor" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[STATUS: TCMS has detected that not all expected doors have been determined within the train]]></comment>
   </variable>
   <variable name="PAD_SDuplDoor" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[STATUS: TCMS has detected a mismatch between the doors in different Consists (two consist have calculated that they have the same doors).]]></comment>
   </variable>
   <variable name="PAD_XNextStnID" array-size="1" type="MWT_UDINT" usage="output">
    <comment><![CDATA[INTERNAL: Next station ID]]></comment>
   </variable>
   <variable name="PAD_ZNxtStnRelPttrn1" array-size="1" type="MWT_UDINT" usage="output">
    <comment><![CDATA[INTERNAL: Next Station Release Pattern most significant bits]]></comment>
   </variable>
   <variable name="PAD_SSalCrwDrClPbRgt_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Saloon crew close all right doors pushbutton active car DM1 internal]]></comment>
   </variable>
   <variable name="PAD_SSalCrwDrClPbLft_1" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car DM1- internal]]></comment>
   </variable>
   <variable name="PAD_SSalCrwDrClPbRgt_2" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Saloon crew close all right doors pushbutton active car DM2- internal]]></comment>
   </variable>
   <variable name="PAD_SSalCrwDrClPbLft_2" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car DM2- internal]]></comment>
   </variable>
   <variable name="PAD_SSalCrwDrClPbRgt_3" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Saloon crew close all right doors pushbutton active car PMLW- internal]]></comment>
   </variable>
   <variable name="PAD_SSalCrwDrClPbLft_3" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car PMLW- internal]]></comment>
   </variable>
   <variable name="PAD_SSalCrwDrClPbRgt_4" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Saloon crew close all right doors pushbutton active car M1L- internal]]></comment>
   </variable>
   <variable name="PAD_SSalCrwDrClPbLft_4" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car M1L- internal]]></comment>
   </variable>
   <variable name="PAD_SSalCrwDrClPbRgt_5" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Saloon crew close all right doors pushbutton active car M2L- internal]]></comment>
   </variable>
   <variable name="PAD_SSalCrwDrClPbLft_5" array-size="1" type="MWT_BOOL" usage="output">
    <comment><![CDATA[Saloon crew close all left doors pushbutton active car M2L- internal]]></comment>
   </variable>
   <variable name="PAD_ZNxtStnRelPttrn2" array-size="1" type="MWT_UDINT" usage="output">
    <comment><![CDATA[INTERNAL: Next Station Release Pattern least significant bits]]></comment>
   </variable>
  </variable-group>
  <variable-group name="Local">
   <variable name="Is4CarInMyConsist" array-size="1" type="MWT_BOOL" usage="output" init="0">
    <comment><![CDATA[0 = 5 cars unit  1 = 4 cars unit]]></comment>
   </variable>
  </variable-group>
 </interface>
</pou>
